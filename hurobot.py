    # HURObot - –ü–æ–ª–Ω—ã–π –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –∫–æ–¥ (19 –ú–∞—è 2025)
import os
import asyncio
import sys
import random
import time
import requests
import re
import urllib.request
import hashlib
import subprocess
from getpass import getpass
from datetime import datetime
import pytz
from telethon import TelegramClient, events
from telethon.errors import (
    FloodWaitError,
    PhoneNumberInvalidError,
    PhoneCodeInvalidError,
    SessionPasswordNeededError,
    MessageNotModifiedError
)
from telethon.tl.functions.account import UpdateStatusRequest
from telethon.tl.functions.messages import DeleteHistoryRequest
from telethon.tl.functions.users import GetFullUserRequest
from telethon.tl.types import DocumentAttributeFilename
from PIL import Image
import io
import telethon
import whois
import traceback

# ======================
# –°–ò–°–¢–ï–ú–ê –û–ë–ù–û–í–õ–ï–ù–ò–ô
# ======================
GITHUB_RAW_URL = "https://raw.githubusercontent.com/rud1x/HuroBot_tg/main/hurobot.py"
VERSION_PATTERN = r"# HURObot - –ü–æ–ª–Ω—ã–π –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –∫–æ–¥ \((\d{1,2} \w+ \d{4})\)"

async def force_update():
    """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–∞"""
    try:
        print(f"\n{COLORS['header']}–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç–∏ —Ñ–∞–π–ª–æ–≤...{COLORS['reset']}")
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–Ω–æ–π –≤–µ—Ä—Å–∏–∏
        with urllib.request.urlopen(GITHUB_RAW_URL) as response:
            remote_content = response.read().decode('utf-8')
            remote_version = re.search(VERSION_PATTERN, remote_content).group(1)
            
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –≤–µ—Ä—Å–∏–∏
        with open(__file__, 'r', encoding='utf-8') as f:
            current_content = f.read()
            current_version = re.search(VERSION_PATTERN, current_content).group(1)
            
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ö–µ—à–µ–π
        if hashlib.md5(current_content.encode()).hexdigest() == hashlib.md5(remote_content.encode()).hexdigest():
            return False
            
        # –ù–∞—á–∞–ª–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        print(f"\n{COLORS['success']}–ù–∞–π–¥–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ!{COLORS['reset']}")
        print(f"{COLORS['info']}–¢–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è: {current_version}{COLORS['reset']}")
        print(f"{COLORS['success']}–ù–æ–≤–∞—è –≤–µ—Ä—Å–∏—è: {remote_version}{COLORS['reset']}")
        print(f"\n{COLORS['header']}–ó–∞–≥—Ä—É–∂–∞—é –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ...{COLORS['reset']}")
        
        # –ó–∞–º–µ–Ω–∞ —Ñ–∞–π–ª–∞
        temp_file = "hurobot_temp.py"
        with open(temp_file, 'w', encoding='utf-8') as f:
            f.write(remote_content)
            
        os.replace(temp_file, __file__)
        
        # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫
        print(f"{COLORS['success']}‚úì –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ!{COLORS['reset']}")
        print(f"{COLORS['info']}–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞—é —Å–∫—Ä–∏–ø—Ç...{COLORS['reset']}")
        subprocess.Popen([sys.executable, __file__])
        sys.exit(0)
        
    except Exception as e:
        print(f"{COLORS['error']}‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏: {str(e)}{COLORS['reset']}")
        return False

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–∏ Telethon
required_version = "1.36.0"
current_version = telethon.__version__
if current_version < required_version:
    print(f"–û—à–∏–±–∫–∞: –¢—Ä–µ–±—É–µ—Ç—Å—è Telethon –≤–µ—Ä—Å–∏–∏ {required_version} –∏–ª–∏ –≤—ã—à–µ. –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –≤–µ—Ä—Å–∏—è {current_version}.")
    print("–û–±–Ω–æ–≤–∏—Ç–µ Telethon –∫–æ–º–∞–Ω–¥–æ–π: pip install --upgrade telethon")
    sys.exit(1)

# –§–∏–æ–ª–µ—Ç–æ–≤–∞—è –ø–∞–ª–∏—Ç—Ä–∞ —Ü–≤–µ—Ç–æ–≤ –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏
COLORS = {
    'header': '\033[38;2;186;85;211m',     # –Ø—Ä–∫–∏–π —Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–π
    'input': '\033[38;2;230;230;250m',     # –õ–∞–≤–∞–Ω–¥–æ–≤—ã–π
    'success': '\033[38;2;221;160;221m',   # –†–æ–∑–æ–≤–∞—Ç–æ-—Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–π
    'error': '\033[38;2;255;0;255m',       # –Ø—Ä–∫–∏–π –ø—É—Ä–ø—É—Ä–Ω—ã–π
    'info': '\033[38;2;147;112;219m',      # –°—Ä–µ–¥–Ω–µ-—Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–π
    'prompt': '\033[38;2;218;112;214m',    # –û—Ä—Ö–∏–¥–µ—è
    'accent1': '\033[38;2;138;43;226m',    # –°–∏–Ω–µ-—Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–π
    'accent2': '\033[38;2;148;0;211m',     # –¢–µ–º–Ω—ã–π —Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–π
    'accent3': '\033[38;2;153;50;204m',    # –¢–µ–º–Ω–∞—è –æ—Ä—Ö–∏–¥–µ—è
    'reset': '\033[0m'                   
}

# –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à–∏ API_ID –∏ API_HASH —Å my.telegram.org
API_ID = 21551581  
API_HASH = '70d80bdf86811654363e45c01c349e98'  
SESSION_PREFIX = "account_"
TEMP_SESSION = "temp.session"
ACCOUNT_DATA = {}

# -------------------------------
# –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò
# -------------------------------
def show_banner():
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –±–∞–Ω–Ω–µ—Ä HURObot –≤ –∫–æ–Ω—Å–æ–ª–∏."""
    try:
        with open(__file__, 'r', encoding='utf-8') as f:
            content = f.read()
            version = re.search(VERSION_PATTERN, content).group(1)
    except:
        version = "N/A"
    
    print(f"""{COLORS['header']}
‚ñà‚ñà‚ïó‚ñë‚ñë‚ñà‚ñà‚ïó‚ñà‚ñà‚ïó‚ñë‚ñë‚ñë‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñë‚ñë‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñë‚ñë‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó
‚ñà‚ñà‚ïë‚ñë‚ñë‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë‚ñë‚ñë‚ñë‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ïö‚ïê‚ïê‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù
‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë‚ñë‚ñë‚ñë‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïë‚ñë‚ñë‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïë‚ñë‚ñë‚ñà‚ñà‚ïë‚ñë‚ñë‚ñë‚ñà‚ñà‚ïë‚ñë‚ñë‚ñë
‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë‚ñë‚ñë‚ñë‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë‚ñë‚ñë‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë‚ñë‚ñë‚ñà‚ñà‚ïë‚ñë‚ñë‚ñë‚ñà‚ñà‚ïë‚ñë‚ñë‚ñë
‚ñà‚ñà‚ïë‚ñë‚ñë‚ñà‚ñà‚ïë‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïë‚ñë‚ñë‚ñà‚ñà‚ïë‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñë‚ñë‚ñë‚ñà‚ñà‚ïë‚ñë‚ñë‚ñë
‚ïö‚ïê‚ïù‚ñë‚ñë‚ïö‚ïê‚ïù‚ñë‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù‚ñë‚ïö‚ïê‚ïù‚ñë‚ñë‚ïö‚ïê‚ïù‚ñë‚ïö‚ïê‚ïê‚ïê‚ïê‚ïù‚ñë‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù‚ñë‚ñë‚ïö‚ïê‚ïê‚ïê‚ïê‚ïù‚ñë‚ñë‚ñë‚ñë‚ïö‚ïê‚ïù‚ñë‚ñë‚ñë

–í–µ—Ä—Å–∏—è: {version}
–¢–µ–ª–µ–≥—Ä–∞–º–º –∫–∞–Ω–∞–ª - @hurodev
{COLORS['reset']}""")
    print(f"{COLORS['accent2']}‚ïê{COLORS['reset']}" * 50)

def clear_screen():
    """–û—á–∏—â–∞–µ—Ç —ç–∫—Ä–∞–Ω –∫–æ–Ω—Å–æ–ª–∏ (Windows –∏–ª–∏ Linux)."""
    os.system('cls' if os.name == 'nt' else 'clear')

async def safe_delete(file_path):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ —É–¥–∞–ª—è–µ—Ç —Ñ–∞–π–ª —Å–µ—Å—Å–∏–∏."""
    try:
        if os.path.exists(file_path):
            os.remove(file_path)
            return True
    except Exception as e:
        print(f"{COLORS['error']}–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {str(e)}{COLORS['reset']}")
    return False

async def load_valid_accounts():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –≤—Å–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã –∏–∑ —Å–µ—Å—Å–∏–π."""
    global ACCOUNT_DATA
    ACCOUNT_DATA = {}
    for session_file in os.listdir('.'):
        if session_file.startswith(SESSION_PREFIX) and session_file.endswith(".session"):
            try:
                async with TelegramClient(session_file, API_ID, API_HASH) as client:
                    if await client.is_user_authorized():
                        me = await client.get_me()
                        account_id = int(session_file.split('_')[1].split('.')[0])
                        ACCOUNT_DATA[account_id] = {
                            'phone': me.phone,
                            'name': me.username or me.first_name or f"–ê–∫–∫–∞—É–Ω—Ç {account_id}",
                            'session': session_file
                        }
            except Exception as e:
                print(f"{COLORS['error']}–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–µ—Å—Å–∏–∏ {session_file}: {str(e)}{COLORS['reset']}")
                await safe_delete(session_file)
                continue

async def delete_all_accounts():
    """–£–¥–∞–ª—è–µ—Ç –≤—Å–µ –∞–∫–∫–∞—É–Ω—Ç—ã –∏ –∏—Ö —Å–µ—Å—Å–∏–∏."""
    deleted = 0
    for account_num in list(ACCOUNT_DATA.keys()):
        session_file = ACCOUNT_DATA[account_num]['session']
        if await safe_delete(session_file):
            del ACCOUNT_DATA[account_num]
            deleted += 1
    print(f"{COLORS['success']}–£–¥–∞–ª–µ–Ω–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {deleted}{COLORS['reset']}")
    await asyncio.sleep(1)

async def create_account():
    clear_screen()
    show_banner()
    print(f"{COLORS['header']}–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞{COLORS['reset']}")
    print(f"{COLORS['accent2']}‚ïê{COLORS['reset']}" * 50)

    client = None
    try:
        await safe_delete(TEMP_SESSION)
        
        while True:
            phone = input(f"{COLORS['prompt']}–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä (+–∫–æ–¥ —Å—Ç—Ä–∞–Ω—ã –Ω–æ–º–µ—Ä, –ø—Ä–∏–º–µ—Ä: +79123456789): {COLORS['reset']}").strip()
            if re.match(r'^\+\d{8,15}$', phone):
                break
            print(f"{COLORS['error']}‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –ü—Ä–∏–º–µ—Ä: +79123456789{COLORS['reset']}")

        if any(acc['phone'] == phone for acc in ACCOUNT_DATA.values()):
            print(f"{COLORS['error']}‚ùå –≠—Ç–æ—Ç –Ω–æ–º–µ—Ä —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!{COLORS['reset']}")
            await asyncio.sleep(1)
            return

        client = TelegramClient(TEMP_SESSION, API_ID, API_HASH)
        await client.connect()

        sent_code = await client.send_code_request(phone)
        print(f"\n{COLORS['success']}‚úì –ö–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ {phone}{COLORS['reset']}")

        code = input(f"{COLORS['prompt']}–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∏–∑ Telegram: {COLORS['reset']}").strip().replace(' ', '')

        try:
            await client.sign_in(phone, code=code, phone_code_hash=sent_code.phone_code_hash)
        except SessionPasswordNeededError:
            password = getpass(f"{COLORS['prompt']}üîê –í–≤–µ–¥–∏—Ç–µ 2FA –ø–∞—Ä–æ–ª—å (—Å–∫—Ä—ã—Ç): {COLORS['reset']}")
            await client.sign_in(password=password)

        me = await client.get_me()
        account_id = max(ACCOUNT_DATA.keys(), default=0) + 1
        new_session = f"{SESSION_PREFIX}{account_id}.session"
        
        await client.disconnect()
        await asyncio.sleep(1)

        if os.path.exists(TEMP_SESSION):
            if os.path.exists(new_session):
                os.remove(new_session)
            os.rename(TEMP_SESSION, new_session)

        ACCOUNT_DATA[account_id] = {
            'phone': phone,
            'name': me.first_name or me.username or f"–ê–∫–∫–∞—É–Ω—Ç {account_id}",
            'session': new_session
        }

        print(f"\n{COLORS['success']}‚úì –£—Å–ø–µ—à–Ω–æ! {me.first_name} –¥–æ–±–∞–≤–ª–µ–Ω{COLORS['reset']}")
        await load_valid_accounts()

    except PhoneNumberInvalidError:
        print(f"{COLORS['error']}‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞!{COLORS['reset']}")
    except PhoneCodeInvalidError:
        print(f"{COLORS['error']}‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è!{COLORS['reset']}")
    except Exception as e:
        print(f"{COLORS['error']}‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}{COLORS['reset']}")

        traceback.print_exc()
    finally:
        if client and client.is_connected():
            await client.disconnect()
        await safe_delete(TEMP_SESSION)
    
    input(f"\n{COLORS['input']}–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...{COLORS['reset']}")

def compress_image(image_bytes):
    """–°–∂–∏–º–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –º–µ—Å—Ç–∞."""
    try:
        img = Image.open(io.BytesIO(image_bytes))
        img = img.convert('RGB')
        img.thumbnail((500, 500), Image.Resampling.LANCZOS)
        output = io.BytesIO()
        img.save(output, format='JPEG', quality=85)
        return output.getvalue()
    except Exception as e:
        print(f"{COLORS['error']}–û—à–∏–±–∫–∞ —Å–∂–∞—Ç–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {str(e)}{COLORS['reset']}")
        return image_bytes

# -------------------------------
# –û–°–ù–û–í–ù–ê–Ø –õ–û–ì–ò–ö–ê
# -------------------------------
def get_moscow_time():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ –ú–æ—Å–∫–≤–µ."""
    return datetime.now(pytz.timezone('Europe/Moscow')).strftime('%Y-%m-%d %H:%M:%S')

async def save_self_destruct_photo(client, event):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–∞–º–æ—É–¥–∞–ª—è—é—â–µ–µ—Å—è —Ñ–æ—Ç–æ –≤ '–ò–∑–±—Ä–∞–Ω–Ω–æ–µ'."""
    try:
        if not event.is_private:
            return False

        ttl = getattr(event, 'ttl_seconds', None) or getattr(event.media, 'ttl_seconds', None)
        if not ttl or ttl <= 0:
            return False

        is_photo = hasattr(event.media, 'photo')
        if not is_photo:
            return False

        media_bytes = await client.download_media(event.media, file=bytes)
        if not media_bytes:
            return False

        compressed_bytes = compress_image(media_bytes)

        sender = await event.get_sender()
        username = sender.username or sender.first_name or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å"
        caption = (
            f"‚ú¶ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ —Å–∞–º–æ—É–¥–∞–ª—è—é—â–µ–µ—Å—è —Ñ–æ—Ç–æ\n"
            f"‚û§ –û—Ç: {username}\n"
            f"‚û§ –í—Ä–µ–º—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è (–ú–°–ö): {get_moscow_time()}\n"
            f"‚û§ ID —Å–æ–æ–±—â–µ–Ω–∏—è: {event.id}\n"
            "\n"
            "**HURObot // @hurodev**"
        )

        await client.send_file(
            'me',
            compressed_bytes,
            caption=caption,
            force_document=False,
            attributes=[DocumentAttributeFilename(file_name=f"self_destruct_{event.id}.jpg")]
        )

        return True
    except Exception as e:
        print(f"{COLORS['error']}–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–æ—Ç–æ: {str(e)}{COLORS['reset']}")
    return False

async def shorten_url(url):
    """–°–æ–∫—Ä–∞—â–∞–µ—Ç URL —á–µ—Ä–µ–∑ tinyurl."""
    try:
        response = requests.get(f"http://tinyurl.com/api-create.php?url={url}", timeout=10)
        response.raise_for_status()
        return response.text
    except requests.RequestException as e:
        print(f"{COLORS['error']}–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∫—Ä–∞—â–µ–Ω–∏–∏ URL: {str(e)}{COLORS['reset']}")
        return url

# -------------------------------
# –ö–õ–ê–°–° –°–û–°–¢–û–Ø–ù–ò–Ø –ö–õ–ò–ï–ù–¢–ê
# -------------------------------
class ClientState:
    """–•—Ä–∞–Ω–∏—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ (–∞–Ω–∏–º–∞—Ü–∏—è, –æ–Ω–ª–∞–π–Ω –∏ —Ç.–¥.)."""
    def __init__(self):
        self.typing_animation = False
        self.active_animation = None
        self.animation_lock = asyncio.Lock()
        self.keep_online = False
        self.spam_online = False
        self.pending_confirmation = {}
        self.online_task = None
        self.spam_online_task = None
        self.current_message_id = None
        self.last_user_activity = 0

    async def stop_animation(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ç–µ–∫—É—â—É—é –∞–Ω–∏–º–∞—Ü–∏—é –Ω–∞–±–æ—Ä–∞."""
        async with self.animation_lock:
            if self.active_animation:
                self.active_animation.cancel()
                try:
                    await self.active_animation
                except (asyncio.CancelledError, Exception):
                    pass
                self.active_animation = None
            self.current_message_id = None

# -------------------------------
# –û–ë–†–ê–ë–û–¢–ö–ê –ê–ö–ö–ê–£–ù–¢–ê (13 –ö–û–ú–ê–ù–î)
# -------------------------------
async def run_account(account_num):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∞–∫–∫–∞—É–Ω—Ç –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã."""
    session_file = ACCOUNT_DATA[account_num]['session']
    phone = ACCOUNT_DATA[account_num]['phone']
    name = ACCOUNT_DATA[account_num]['name']
    running = True
    
    async def console_input_listener():
        nonlocal running
        while running:
            user_input = await asyncio.get_event_loop().run_in_executor(
                None, input, 
                f"{COLORS['input']}–í–≤–µ–¥–∏—Ç–µ 1 –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é: {COLORS['reset']}"
            )
            if user_input.strip() == '1':
                running = False
                await client.disconnect()

    try:
        async with TelegramClient(session_file, API_ID, API_HASH) as client:
            state = ClientState()
            client._hurobot_state = state
            input_task = asyncio.create_task(console_input_listener())

            async def keep_online_task():
                while state.keep_online and client.is_connected():
                    try:
                        await client(UpdateStatusRequest(offline=False))
                        await asyncio.sleep(random.randint(30, 40))
                    except FloodWaitError as e:
                        print(f"{COLORS['error']}FloodWait: {e.seconds} —Å–µ–∫{COLORS['reset']}")
                        await asyncio.sleep(e.seconds + 5)
                    except Exception as e:
                        print(f"{COLORS['error']}–û—à–∏–±–∫–∞ –æ–Ω–ª–∞–π–Ω–∞: {str(e)}{COLORS['reset']}")
                        await asyncio.sleep(60)

            async def spam_online_task():
                while state.spam_online and client.is_connected():
                    try:
                        if time.time() - state.last_user_activity < 60:
                            await asyncio.sleep(10)
                            continue
                        online = random.choice([True, False])
                        await client(UpdateStatusRequest(offline=not online))
                        await asyncio.sleep(1)
                    except FloodWaitError as e:
                        print(f"{COLORS['error']}FloodWait: {e.seconds} —Å–µ–∫{COLORS['reset']}")
                        await asyncio.sleep(e.seconds + 5)
                    except Exception as e:
                        print(f"{COLORS['error']}–û—à–∏–±–∫–∞ –º–∏–≥–∞—é—â–µ–≥–æ –æ–Ω–ª–∞–π–Ω–∞: {str(e)}{COLORS['reset']}")
                        await asyncio.sleep(10)

            # –°–ª–æ–≤–∞—Ä—å —Å –æ–ø–∏—Å–∞–Ω–∏—è–º–∏ –∫–æ–º–∞–Ω–¥
            command_info = {
                'help': {
                    'name': 'help',
                    'description': '–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥ –∏–ª–∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–æ–º–∞–Ω–¥–µ.',
                    'syntax': '`.help` [–Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã]',
                    'example': '`.help sonl`'
                },
                'onl': {
                    'name': 'onl',
                    'description': '–í–∫–ª—é—á–∞–µ—Ç –∏–ª–∏ –≤—ã–∫–ª—é—á–∞–µ—Ç —Ä–µ–∂–∏–º –≤–µ—á–Ω–æ–≥–æ –æ–Ω–ª–∞–π–Ω–∞ (—Å—Ç–∞—Ç—É—Å "–æ–Ω–ª–∞–π–Ω" –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –∫–∞–∂–¥—ã–µ 30‚Äì40 —Å–µ–∫—É–Ω–¥).',
                    'syntax': '`.onl` [on/off]',
                    'example': '`.onl on`'
                },
                'sonl': {
                    'name': 'sonl',
                    'description': '–í–∫–ª—é—á–∞–µ—Ç –∏–ª–∏ –≤—ã–∫–ª—é—á–∞–µ—Ç –º–∏–≥–∞—é—â–∏–π –æ–Ω–ª–∞–π–Ω (—Å—Ç–∞—Ç—É—Å –º–µ–Ω—è–µ—Ç—Å—è –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É). –ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –µ—Å–ª–∏ –≤–∫–ª—é—á—ë–Ω .onl.',
                    'syntax': '`.sonl` [on/off]',
                    'example': '`.sonl on`'
                },
                'save': {
                    'name': 'save',
                    'description': '–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–∞–º–æ—É–¥–∞–ª—è—é—â–µ–µ—Å—è —Ñ–æ—Ç–æ –∏–∑ –ª–∏—á–Ω–æ–≥–æ —á–∞—Ç–∞ –≤ "–ò–∑–±—Ä–∞–Ω–Ω–æ–µ".',
                    'syntax': '`.save` (–≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Ñ–æ—Ç–æ)',
                    'example': '`.save` (–≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Ñ–æ—Ç–æ)'
                },
                'clone': {
                    'name': 'clone',
                    'description': '–ö–ª–æ–Ω–∏—Ä—É–µ—Ç –ø–æ—Å—Ç –∏–∑ –∫–∞–Ω–∞–ª–∞ –∏–ª–∏ —á–∞—Ç–∞ –≤ "–ò–∑–±—Ä–∞–Ω–Ω–æ–µ" –ø–æ —Å—Å—ã–ª–∫–µ.',
                    'syntax': '`.clone` [url]',
                    'example': '`.clone https://t.me/channel/123`'
                },
                'short': {
                    'name': 'short',
                    'description': '–°–æ–∫—Ä–∞—â–∞–µ—Ç URL-–∞–¥—Ä–µ—Å —Å –ø–æ–º–æ—â—å—é —Å–µ—Ä–≤–∏—Å–∞ tinyurl.',
                    'syntax': '`.short` [url]',
                    'example': '`.short https://example.com`'
                },
                'delme': {
                    'name': 'delme',
                    'description': '–£–¥–∞–ª—è–µ—Ç –≤—Å—é –ø–µ—Ä–µ–ø–∏—Å–∫—É –≤ —Ç–µ–∫—É—â–µ–º —á–∞—Ç–µ –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∫–æ–¥–æ–º.',
                    'syntax': '`.delme` [–∫–æ–¥]',
                    'example': '`.delme` 1234'
                },
                'ani': {
                    'name': 'ani',
                    'description': '–í–∫–ª—é—á–∞–µ—Ç –∏–ª–∏ –≤—ã–∫–ª—é—á–∞–µ—Ç –∞–Ω–∏–º–∞—Ü–∏—é –Ω–∞–±–æ—Ä–∞ —Ç–µ–∫—Å—Ç–∞ (–ø–æ –æ–¥–Ω–æ–π –±—É–∫–≤–µ –∫–∞–∂–¥—ã–µ 0.05 —Å–µ–∫).',
                    'syntax': '`.ani` [on/off]',
                    'example': '`.ani on`'
                },
                'sti': {
                    'name': 'sti',
                    'description': '–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–∫–∞–∑–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–∏–∫–µ—Ä–æ–≤ –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å—Ç–∏–∫–µ—Ä (–¥–æ 50).',
                    'syntax': '`.sti` [—á–∏—Å–ª–æ]',
                    'example': '`.sti 10` (–≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å—Ç–∏–∫–µ—Ä)'
                },
                'tagall': {
                    'name': 'tagall',
                    'description': '–£–ø–æ–º–∏–Ω–∞–µ—Ç –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–∞ —á–µ—Ä–µ–∑ –∏—Ö @username.',
                    'syntax': '`.tagall`',
                    'example': '`.tagall`'
                },
                'iter': {
                    'name': 'iter',
                    'description': '–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–∞ –≤ —Ñ–∞–π–ª –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤ "–ò–∑–±—Ä–∞–Ω–Ω–æ–µ" –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω -n —Ç–æ —Ç–æ–ª—å–∫–æ —Å –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ–æ—Ñ–Ω–∞.',
                    'syntax': '`.iter` [-n]',
                    'example': '`.iter -n`'
                },
                'up': {
                    'name': 'up',
                    'description': '–í—ã–ø–æ–ª–Ω—è–µ—Ç –º–Ω–æ–≥–æ–∫—Ä–∞—Ç–Ω—ã–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —É–¥–∞–ª–µ–Ω–∏–µ–º —Å–æ–æ–±—â–µ–Ω–∏–π (–¥–æ 50).',
                    'syntax': '`.up` [—á–∏—Å–ª–æ]',
                    'example': '`.up 5` (–≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ)'
                },
                'data': {
                    'name': 'data',
                    'description': '–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ (ID, –∏–º—è, —Ç–µ–ª–µ—Ñ–æ–Ω, —Å—Ç–∞—Ç—É—Å, —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è, –æ–ø–∏—Å–∞–Ω–∏–µ).',
                    'syntax': '`.data` (–≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ)',
                    'example': '`.data` (–≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ)'
                },
                'osint': {
                    'name': 'osint',
                    'description': '–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ IP/–Ω–æ–º–µ—Ä—É/–ø–æ—á—Ç–µ',
                    'syntax': '`.osint` [–∑–Ω–∞—á–µ–Ω–∏–µ]',
                    'example': '`.osint 8.8.8.8` –∏–ª–∏ `.osint example@mail.com` –∏–ª–∏ `.osint +79991234567`'
                },
                'whois': {
                    'name': 'whois',
                    'description': '–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ–º–µ–Ω–µ (—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è, –≤–ª–∞–¥–µ–ª–µ—Ü, DNS –∏ —Ç.–¥.)',
                    'syntax': '`.whois` [–¥–æ–º–µ–Ω]',
                    'example': '`.whois google.com`'
                },
                }

            def get_usage_instructions(command_name, status=None):
                """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –∫–æ–º–∞–Ω–¥—ã."""
                info = command_info[command_name]
                text = f"‚ú¶ –£–∫–∞–∑–∞–Ω–∏—è –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é\n" \
                       f"‚û§ –ö–æ–º–∞–Ω–¥–∞: `{info['name']}`\n"
                if status:
                    text += f"‚û§ –°—Ç–∞—Ç—É—Å: {status}\n"
                text += f"‚û§ –û–ø–∏—Å–∞–Ω–∏–µ: {info['description']}\n" \
                        f"‚û§ –°–∏–Ω—Ç–∞–∫—Å–∏—Å: {info['syntax']}\n" \
                        f"‚û§ –ü—Ä–∏–º–µ—Ä: {info['example']}\n" \
                        "\n" \
                        "**HURObot // @hurodev**"
                return text

            # 1. –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–∞–º–æ—É–¥–∞–ª—è—é—â–∏—Ö—Å—è —Ñ–æ—Ç–æ
            @client.on(events.NewMessage(func=lambda e: e.is_private))
            async def auto_save(event):
                await save_self_destruct_photo(client, event)

            # 2. .save - –†—É—á–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–∞–º–æ—É–¥–∞–ª—è—é—â–µ–≥–æ—Å—è —Ñ–æ—Ç–æ
            @client.on(events.NewMessage(outgoing=True, pattern=r'^\.save$'))
            async def manual_save(event):
                state.last_user_activity = time.time()
                if not event.is_reply:
                    await event.edit(get_usage_instructions('save'))
                    return
                reply = await event.get_reply_message()
                if not (hasattr(reply.media, 'photo') and (getattr(reply, 'ttl_seconds', None) or getattr(reply.media, 'ttl_seconds', None))):
                    await event.edit(f"‚ú¶ –û—à–∏–±–∫–∞\n"
                                   f"‚û§ –≠—Ç–æ –Ω–µ —Å–∞–º–æ—É–¥–∞–ª—è—é—â–µ–µ—Å—è —Ñ–æ—Ç–æ\n"
                                   f"‚û§ –§–æ—Ä–º–∞—Ç: `.save` (–≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Ñ–æ—Ç–æ)\n"
                                   "\n"
                                   "**HURObot // @hurodev**")
                    return
                try:
                    media_bytes = await client.download_media(reply.media, file=bytes)
                    compressed_bytes = compress_image(media_bytes)
                    sender = await reply.get_sender()
                    username = sender.username or sender.first_name or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å"
                    caption = (
                        f"‚ú¶ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ —Å–∞–º–æ—É–¥–∞–ª—è—é—â–µ–µ—Å—è —Ñ–æ—Ç–æ\n"
                        f"‚û§ –û—Ç: {username}\n"
                        f"‚û§ –í—Ä–µ–º—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è (–ú–°–ö): {get_moscow_time()}\n"
                        f"‚û§ ID —Å–æ–æ–±—â–µ–Ω–∏—è: {reply.id}\n"
                        "\n"
                        "**HURObot // @hurodev**"
                    )
                    await client.send_file(
                        'me',
                        compressed_bytes,
                        caption=caption,
                        force_document=False,
                        attributes=[DocumentAttributeFilename(file_name=f"self_destruct_{reply.id}.jpg")]
                    )
                    await event.delete()
                except Exception as e:
                    await event.edit(f"‚ú¶ –û—à–∏–±–∫–∞\n"
                                   f"‚û§ {str(e)}\n"
                                   "\n"
                                   "**HURObot // @hurodev**")

            # 3. .onl - –í–µ—á–Ω—ã–π –æ–Ω–ª–∞–π–Ω
            @client.on(events.NewMessage(outgoing=True, pattern=r'^\.onl(?:\s+(on|off))?$'))
            async def online_handler(event):
                state.last_user_activity = time.time()
                action = event.pattern_match.group(1)
                if not action:
                    status = "–≤–∫–ª—é—á—ë–Ω" if state.keep_online else "–≤—ã–∫–ª—é—á–µ–Ω"
                    await event.edit(get_usage_instructions('onl', status=status))
                    return
                try:
                    new_state = action.lower() == 'on'
                    if new_state == state.keep_online:
                        status = "–≤–∫–ª—é—á–µ–Ω–∞" if state.keep_online else "–≤—ã–∫–ª—é—á–µ–Ω–∞"
                        await event.edit(f"‚ú¶ –í–µ—á–Ω—ã–π –æ–Ω–ª–∞–π–Ω —É–∂–µ {status}\n"
                                       f"‚û§ –ü–æ–¥—Ä–æ–±–Ω–æ: `.help onl`\n"
                                       "\n"
                                       "**HURObot // @hurodev**")
                        return
                    state.keep_online = new_state
                    status = "–≤–∫–ª—é—á–µ–Ω–∞" if state.keep_online else "–≤—ã–∫–ª—é—á–µ–Ω–∞"
                    if state.keep_online and state.spam_online:
                        state.spam_online = False
                        if state.spam_online_task:
                            state.spam_online_task.cancel()
                            try:
                                await state.spam_online_task
                            except asyncio.CancelledError:
                                pass
                            state.spam_online_task = None
                    await event.edit(f"‚ú¶ –í–µ—á–Ω—ã–π –æ–Ω–ª–∞–π–Ω {status}\n"
                                   f"‚û§ –ü–æ–¥—Ä–æ–±–Ω–æ: `.help onl`\n"
                                   "\n"
                                   "**HURObot // @hurodev**")
                    if state.keep_online and client.is_connected():
                        if state.online_task:
                            state.online_task.cancel()
                            try:
                                await state.online_task
                            except asyncio.CancelledError:
                                pass
                        state.online_task = asyncio.create_task(keep_online_task())
                    elif state.online_task:
                        state.online_task.cancel()
                        try:
                            await state.online_task
                        except asyncio.CancelledError:
                            pass
                        state.online_task = None
                except Exception as e:
                    await event.edit(f"‚ú¶ –û—à–∏–±–∫–∞\n"
                                   f"‚û§ {str(e)}\n"
                                   "\n"
                                   "**HURObot // @hurodev**")

            # 4. .sonl - –ú–∏–≥–∞—é—â–∏–π –æ–Ω–ª–∞–π–Ω
            @client.on(events.NewMessage(outgoing=True, pattern=r'^\.sonl(?:\s+(on|off))?$'))
            async def sonl_handler(event):
                state.last_user_activity = time.time()
                action = event.pattern_match.group(1)
                if not action:
                    status = "–≤–∫–ª—é—á—ë–Ω" if state.spam_online else "–≤—ã–∫–ª—é—á–µ–Ω"
                    await event.edit(get_usage_instructions('sonl', status=status))
                    return
                try:
                    new_state = action.lower() == 'on'
                    if new_state == state.spam_online:
                        status = "–≤–∫–ª—é—á—ë–Ω" if state.spam_online else "–≤—ã–∫–ª—é—á–µ–Ω"
                        await event.edit(f"‚ú¶ –ú–∏–≥–∞—é—â–∏–π –æ–Ω–ª–∞–π–Ω —É–∂–µ {status}\n"
                                       f"‚û§ –ü–æ–¥—Ä–æ–±–Ω–æ: `.help sonl`\n"
                                       "\n"
                                       "**HURObot // @hurodev**")
                        return
                    if new_state and state.keep_online:
                        await event.edit(f"‚ú¶ –û—à–∏–±–∫–∞\n"
                                       f"‚û§ –í—ã–∫–ª—é—á–∏—Ç–µ –≤–µ—á–Ω—ã–π –æ–Ω–ª–∞–π–Ω (`.onl off`)\n"
                                       "\n"
                                       "**HURObot // @hurodev**")
                        return
                    state.spam_online = new_state
                    status = "–≤–∫–ª—é—á—ë–Ω" if state.spam_online else "–≤—ã–∫–ª—é—á–µ–Ω"
                    await event.edit(f"‚ú¶ –ú–∏–≥–∞—é—â–∏–π –æ–Ω–ª–∞–π–Ω {status}\n"
                                   f"‚û§ –ü–æ–¥—Ä–æ–±–Ω–æ: `.help sonl`\n"
                                   "\n"
                                   "**HURObot // @hurodev**")
                    if state.spam_online:
                        if state.spam_online_task:
                            state.spam_online_task.cancel()
                            try:
                                await state.spam_online_task
                            except asyncio.CancelledError:
                                pass
                        state.spam_online_task = asyncio.create_task(spam_online_task())
                    elif state.spam_online_task:
                        state.spam_online_task.cancel()
                        try:
                            await state.spam_online_task
                        except asyncio.CancelledError:
                            pass
                        state.spam_online_task = None
                except Exception as e:
                    await event.edit(f"‚ú¶ –û—à–∏–±–∫–∞\n"
                                   f"‚û§ {str(e)}\n"
                                   "\n"
                                   "**HURObot // @hurodev**")

            # 5. .clone - –ö–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–∞
            @client.on(events.NewMessage(outgoing=True, pattern=r'^\.clone(?:\s+(.+))?$'))
            async def clone_handler(event):
                state.last_user_activity = time.time()
                post_link = event.pattern_match.group(1)
                if not post_link:
                    await event.edit(get_usage_instructions('clone'))
                    return
                if not post_link.startswith('https://t.me/'):
                    await event.edit(f"‚ú¶ –û—à–∏–±–∫–∞\n"
                                   f"‚û§ –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Å—ã–ª–∫–∏\n"
                                   f"‚û§ –§–æ—Ä–º–∞—Ç: `.clone https://t.me/–∫–∞–Ω–∞–ª/123`\n"
                                   "\n"
                                   "**HURObot // @hurodev**")
                    return
                try:
                    parts = post_link.split('/')
                    channel = parts[-2]
                    post_id = int(parts[-1])
                    entity = await client.get_entity(channel)
                    message = await client.get_messages(entity, ids=post_id)
                    if message.media:
                        await client.send_file('me', message.media, caption=message.text or '')
                    else:
                        await client.send_message('me', message.text or '–ü—É—Å—Ç–æ–π –ø–æ—Å—Ç')
                    await event.edit(f"‚ú¶ –ö–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ\n"
                                   f"‚û§ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ \"–ò–∑–±—Ä–∞–Ω–Ω–æ–µ\"\n"
                                   "\n"
                                   "**HURObot // @hurodev**")
                except Exception as e:
                    await event.edit(f"‚ú¶ –û—à–∏–±–∫–∞\n"
                                   f"‚û§ {str(e)}\n"
                                   "\n"
                                   "**HURObot // @hurodev**")

            # 6. .short - –°–æ–∫—Ä–∞—â–µ–Ω–∏–µ URL
            @client.on(events.NewMessage(outgoing=True, pattern=r'^\.short(?:\s+(.+))?$'))
            async def short_handler(event):
                state.last_user_activity = time.time()
                url = event.pattern_match.group(1)
                if not url:
                    await event.edit(get_usage_instructions('short'))
                    return
                if not url.startswith('http'):
                    await event.edit(f"‚ú¶ –û—à–∏–±–∫–∞\n"
                                   f"‚û§ –£–∫–∞–∂–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π URL\n"
                                   f"‚û§ –§–æ—Ä–º–∞—Ç: `.short https://example.com`\n"
                                   "\n"
                                   "**HURObot // @hurodev**")
                    return
                try:
                    short_url = await shorten_url(url)
                    await event.edit(f"‚ú¶ –°–æ–∫—Ä–∞—â–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ\n"
                                   f"‚û§ –ò—Å—Ö–æ–¥–Ω—ã–π URL: {url}\n"
                                   f"‚û§ –ö–æ—Ä–æ—Ç–∫–∏–π URL: {short_url}\n"
                                   "\n"
                                   "**HURObot // @hurodev**")
                except Exception as e:
                    await event.edit(f"‚ú¶ –û—à–∏–±–∫–∞\n"
                                   f"‚û§ {str(e)}\n"
                                   "\n"
                                   "**HURObot // @hurodev**")

            # 7. .delme - –£–¥–∞–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–ø–∏—Å–∫–∏
            @client.on(events.NewMessage(outgoing=True, pattern=r'^\.delme(?:\s+(\d+))?$'))
            async def delme_handler(event):
                state.last_user_activity = time.time()
                code = event.pattern_match.group(1)
                if not code:
                    confirm_code = ''.join(random.choices('0123456789', k=4))
                    state.pending_confirmation[event.chat_id] = confirm_code
                    await event.edit(f"‚ú¶ –¢—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ\n"
                                   f"‚û§ –í–≤–µ–¥–∏—Ç–µ: `.delme {confirm_code}`\n"
                                   "\n"
                                   "**HURObot // @hurodev**")
                    return
                try:
                    if state.pending_confirmation.get(event.chat_id) == code:
                        await client(DeleteHistoryRequest(peer=event.chat_id, max_id=0, just_clear=True))
                        await event.edit(f"‚ú¶ –ü–µ—Ä–µ–ø–∏—Å–∫–∞ —É–¥–∞–ª–µ–Ω–∞\n"
                                       f"‚û§ –ß–∞—Ç –æ—á–∏—â–µ–Ω\n"
                                       "\n"
                                       "**HURObot // @hurodev**")
                    else:
                        await event.edit(get_usage_instructions('delme'))
                except Exception as e:
                    await event.edit(f"‚ú¶ –û—à–∏–±–∫–∞\n"
                                   f"‚û§ {str(e)}\n"
                                   "\n"
                                   "**HURObot // @hurodev**")

            # 8. .ani - –ê–Ω–∏–º–∞—Ü–∏—è –Ω–∞–±–æ—Ä–∞ —Ç–µ–∫—Å—Ç–∞
            @client.on(events.NewMessage(outgoing=True, pattern=r'^\.ani(?:\s+(on|off))?$'))
            async def ani_handler(event):
                state.last_user_activity = time.time()
                action = event.pattern_match.group(1)
                if not action:
                    status = "–≤–∫–ª—é—á–µ–Ω–∞" if state.typing_animation else "–≤—ã–∫–ª—é—á–µ–Ω–∞"
                    await event.edit(get_usage_instructions('ani', status=status))
                    return
                try:
                    new_state = action.lower() == 'on'
                    if new_state == state.typing_animation:
                        status = "–≤–∫–ª—é—á–µ–Ω–∞" if state.typing_animation else "–≤—ã–∫–ª—é—á–µ–Ω–∞"
                        await event.edit(f"‚ú¶ –ê–Ω–∏–º–∞—Ü–∏—è —É–∂–µ {status}\n"
                                       f"‚û§ –ü–æ–¥—Ä–æ–±–Ω–æ: `.help ani`\n"
                                       "\n"
                                       "**HURObot // @hurodev**")
                        return
                    state.typing_animation = new_state
                    status = "–≤–∫–ª—é—á–µ–Ω–∞" if state.typing_animation else "–≤—ã–∫–ª—é—á–µ–Ω–∞"
                    await event.edit(f"‚ú¶ –ê–Ω–∏–º–∞—Ü–∏—è {status}\n"
                                   f"‚û§ –ü–æ–¥—Ä–æ–±–Ω–æ: `.help ani`\n"
                                   "\n"
                                   "**HURObot // @hurodev**")
                    if not state.typing_animation:
                        await state.stop_animation()
                except Exception as e:
                    await event.edit(f"‚ú¶ –û—à–∏–±–∫–∞\n"
                                   f"‚û§ {str(e)}\n"
                                   "\n"
                                   "**HURObot // @hurodev**")

            # –ê–Ω–∏–º–∞—Ü–∏—è –¥–ª—è –∏—Å—Ö–æ–¥—è—â–∏—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            @client.on(events.NewMessage(outgoing=True))
            async def animate_message(event):
                state.last_user_activity = time.time()
                if not state.typing_animation or not event.text or event.text.startswith('.'):
                    return
                try:
                    await state.stop_animation()
                    current_text = ""
                    await asyncio.sleep(0.1)
                    for char in event.text:
                        if not state.typing_animation:
                            break
                        current_text += char
                        try:
                            await event.edit(current_text)
                            await asyncio.sleep(0.05)
                        except MessageNotModifiedError:
                            continue
                        except FloodWaitError as e:
                            await asyncio.sleep(e.seconds + 1)
                            break
                        except Exception as e:
                            await event.edit(f"‚ú¶ –û—à–∏–±–∫–∞\n"
                                           f"‚û§ {str(e)}\n"
                                           "\n"
                                           "**HURObot // @hurodev**")
                            break
                except Exception as e:
                    await event.edit(f"‚ú¶ –û—à–∏–±–∫–∞\n"
                                   f"‚û§ {str(e)}\n"
                                   "\n"
                                   "**HURObot // @hurodev**")

            # 9. .sti - –°–ø–∞–º —Å—Ç–∏–∫–µ—Ä–∞–º–∏
            @client.on(events.NewMessage(outgoing=True, pattern=r'^\.sti(?:\s+(\d+))?$'))
            async def sti_handler(event):
                state.last_user_activity = time.time()
                count = event.pattern_match.group(1)
                if not count or not event.is_reply:
                    await event.edit(get_usage_instructions('sti'))
                    return
                try:
                    count = int(count)
                    count = min(count, 50)
                    reply = await event.get_reply_message()
                    if not hasattr(reply, 'sticker'):
                        await event.edit(f"‚ú¶ –û—à–∏–±–∫–∞\n"
                                       f"‚û§ –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å—Ç–∏–∫–µ—Ä\n"
                                       f"‚û§ –§–æ—Ä–º–∞—Ç: `.sti 10`\n"
                                       "\n"
                                       "**HURObot // @hurodev**")
                        return
                    for _ in range(count):
                        await reply.reply(file=reply.sticker)
                    await event.delete()
                except ValueError:
                    await event.edit(f"‚ú¶ –û—à–∏–±–∫–∞\n"
                                   f"‚û§ –£–∫–∞–∂–∏—Ç–µ —á–∏—Å–ª–æ\n"
                                   f"‚û§ –§–æ—Ä–º–∞—Ç: `.sti 10`\n"
                                   "\n"
                                   "**HURObot // @hurodev**")
                except Exception as e:
                    await event.edit(f"‚ú¶ –û—à–∏–±–∫–∞\n"
                                   f"‚û§ {str(e)}\n"
                                   "\n"
                                   "**HURObot // @hurodev**")

            # 10. .tagall - –£–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
            @client.on(events.NewMessage(outgoing=True, pattern=r'^\.tagall$'))
            async def tagall_handler(event):
                state.last_user_activity = time.time()
                try:
                    participants = await client.get_participants(event.chat_id)
                    mentions = " ".join([f'@{p.username}' for p in participants if p.username])
                    if not mentions:
                        await event.edit(f"‚ú¶ –û—à–∏–±–∫–∞\n"
                                       f"‚û§ –ù–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å username\n"
                                       "\n"
                                       "**HURObot // @hurodev**")
                        return
                    await event.edit(f"‚ú¶ –£–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ\n"
                                   f"‚û§ –£–ø–æ–º—è–Ω—É—Ç—ã: {mentions}\n"
                                   "\n"
                                   "**HURObot // @hurodev**")
                except Exception as e:
                    await event.edit(f"‚ú¶ –û—à–∏–±–∫–∞\n"
                                   f"‚û§ {str(e)}\n"
                                   "\n"
                                   "**HURObot // @hurodev**")

            # 11. .iter - –≠–∫—Å–ø–æ—Ä—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–∞
            @client.on(events.NewMessage(outgoing=True, pattern=r'^\.iter(?:\s+(-n))?$'))
            async def iter_handler(event):
                state.last_user_activity = time.time()
                only_phone = event.pattern_match.group(1) == '-n'
                try:
                    chat = await event.get_chat()
                    chat_link = f"https://t.me/{chat.username}" if chat.username else "–ß–∞—Ç –±–µ–∑ –ø—É–±–ª–∏—á–Ω–æ–π —Å—Å—ã–ª–∫–∏"
                    participants = await client.get_participants(event.chat_id)
                    if not participants:
                        await event.edit(f"‚ú¶ –û—à–∏–±–∫–∞\n"
                                       f"‚û§ –ù–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ —á–∞—Ç–µ\n"
                                       "\n"
                                       "**HURObot // @hurodev**")
                        return
                    with open("members.txt", "w", encoding="utf-8") as f:
                        for p in participants:
                            if not only_phone or p.phone:
                                f.write(f"{p.id} | @{p.username} | {p.phone or '–Ω–µ—Ç'}\n")
                    caption = (
                        f"‚ú¶ –≠–∫—Å–ø–æ—Ä—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤\n"
                        f"‚û§ –ß–∞—Ç: {chat_link}\n"
                        f"‚û§ –í—Ä–µ–º—è (–ú–°–ö): {get_moscow_time()}\n"
                        "\n"
                        "**HURObot // @hurodev**"
                    )
                    await client.send_file('me', "members.txt", caption=caption)
                    os.remove("members.txt")
                    await event.edit(f"‚ú¶ –≠–∫—Å–ø–æ—Ä—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω\n"
                                   f"‚û§ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ \"–ò–∑–±—Ä–∞–Ω–Ω–æ–µ\"\n"
                                   "\n"
                                   "**HURObot // @hurodev**")
                except Exception as e:
                    await event.edit(f"‚ú¶ –û—à–∏–±–∫–∞\n"
                                   f"‚û§ {str(e)}\n"
                                   "\n"
                                   "**HURObot // @hurodev**")

            # 12. .up - –ú–Ω–æ–≥–æ–∫—Ä–∞—Ç–Ω—ã–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è
            @client.on(events.NewMessage(outgoing=True, pattern=r'^\.up(?:\s+(\d+))?$'))
            async def up_handler(event):
                state.last_user_activity = time.time()
                count = event.pattern_match.group(1)
                if not count or not event.is_reply:
                    await event.edit(get_usage_instructions('up'))
                    return
                try:
                    count = int(count)
                    count = min(count, 50)
                    reply = await event.get_reply_message()
                    user = await reply.get_sender()
                    if not user.username:
                        await event.edit(f"‚ú¶ –û—à–∏–±–∫–∞\n"
                                       f"‚û§ –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç username\n"
                                       f"‚û§ –§–æ—Ä–º–∞—Ç: `.up 5`\n"
                                       "\n"
                                       "**HURObot // @hurodev**")
                        return
                    for _ in range(count):
                        msg = await client.send_message(event.chat_id, f"@{user.username}")
                        await msg.delete()
                    await event.edit(f"‚ú¶ –ü–µ—Ä–µ—É–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã\n"
                                   f"‚û§ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {count} —É–ø–æ–º–∏–Ω–∞–Ω–∏–π\n"
                                   f"‚û§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{user.username}\n"
                                   "\n"
                                   "**HURObot // @hurodev**")
                except ValueError:
                    await event.edit(f"‚ú¶ –û—à–∏–±–∫–∞\n"
                                   f"‚û§ –£–∫–∞–∂–∏—Ç–µ —á–∏—Å–ª–æ\n"
                                   f"‚û§ –§–æ—Ä–º–∞—Ç: `.up 5`\n"
                                   "\n"
                                   "**HURObot // @hurodev**")
                except Exception as e:
                    await event.edit(f"‚ú¶ –û—à–∏–±–∫–∞\n"
                                   f"‚û§ {str(e)}\n"
                                   "\n"
                                   "**HURObot // @hurodev**")

            # 13. .data - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            @client.on(events.NewMessage(outgoing=True, pattern=r'^\.data$'))
            async def data_handler(event):
                state.last_user_activity = time.time()
                if not event.is_reply:
                    await event.edit(get_usage_instructions('data'))
                    return
                try:
                    reply = await event.get_reply_message()
                    user = await reply.get_sender()
                    full_user = await client(GetFullUserRequest(user))
                    user_info = f"ID: {user.id}\n–ò–º—è: {user.first_name}"
                    if hasattr(user, 'phone'):
                        user_info += f"\n–¢–µ–ª–µ—Ñ–æ–Ω: {user.phone or '—Å–∫—Ä—ã—Ç'}"
                    if hasattr(user, 'status'):
                        status = user.status
                        if hasattr(status, 'was_online'):
                            last_online = status.was_online.strftime('%Y-%m-%d %H:%M:%S')
                            user_info += f"\n–ü–æ—Å–ª–µ–¥–Ω–∏–π –æ–Ω–ª–∞–π–Ω: {last_online}"
                        if hasattr(status, 'created'):
                            reg_date = status.created.strftime('%Y-%m-%d %H:%M:%S')
                            user_info += f"\n–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {reg_date}"
                        else:
                            user_info += "\n–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: –ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ"
                    if hasattr(full_user, 'about'):
                        user_info += f"\n–û —Å–µ–±–µ: {full_user.about[:100] + '...' if full_user.about else '–Ω–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏'}"
                    await event.edit(f"‚ú¶ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
                                   f"‚û§ {user_info.replace('\n', '\n‚û§ ')}\n"
                                   "\n"
                                   "**HURObot // @hurodev**")
                except Exception as e:
                    await event.edit(f"‚ú¶ –û—à–∏–±–∫–∞\n"
                                   f"‚û§ {str(e)}\n"
                                   "\n"
                                   "**HURObot // @hurodev**")

            @client.on(events.NewMessage(outgoing=True, pattern=r'^\.osint(?:\s+(.+))?$'))
            async def osint_handler(event):
                state.last_user_activity = time.time()
                args = event.text.split(' ', 1)
                if len(args) < 2:
                    await event.edit(
                        "<b>‚ú¶ –í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏!\n–ü—Ä–∏–º–µ—Ä—ã:</b>\n"
                        "‚û§ <code>.osint 8.8.8.8</code>\n"
                        "‚û§ <code>.osint +79123456789</code>\n"
                        "‚û§ <code>.osint example@mail.com</code>",
                        parse_mode='html'
                    )
                    return
                
                target = args[1].strip()
                await event.edit(f"<b>‚ú¶ –ù–∞—á–∏–Ω–∞—é –∞–Ω–∞–ª–∏–∑:</b> <code>{target}</code>", parse_mode='html')
                
                try:
                    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –¥–∞–Ω–Ω—ã—Ö
                    if re.match(r'^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$', target):
                        await ip_lookup(event, target)
                    elif '@' in target:
                        await mail_lookup(event, target)
                    elif re.match(r'^\+?[\d\s\-\(\)]{7,}$', target):
                        await phone_lookup(event, target)
                    else:
                        await event.edit("<b>‚ú¶ –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö!</b>", parse_mode='html')
                        
                except Exception as e:
                    await event.edit(f"<b>‚ú¶ –û—à–∏–±–∫–∞:</b>\n‚û§ <code>{str(e)}</code>", parse_mode='html')

            async def ip_lookup(event, ip):
                """–û–±—Ä–∞–±–æ—Ç–∫–∞ IP-–∞–¥—Ä–µ—Å–∞"""
                try:
                    data = requests.get(f"http://ipwho.is/{ip}").json()
                    if data['success']:
                        response = (
                            f"<b>‚ú¶ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏ IP:</b>\n"
                            f"‚û§ <b>–¶–µ–ª—å:</b> <code>{ip}</code>\n"
                            f"‚îú <b>–ü—Ä–æ–≤–∞–π–¥–µ—Ä:</b> <code>{data['connection']['isp']}</code>\n"
                            f"‚îú <b>–°—Ç—Ä–∞–Ω–∞:</b> {data['flag']['emoji']} <code>{data['country']}</code>\n"
                            f"‚îú <b>–ì–æ—Ä–æ–¥:</b> <code>{data['city']}</code>\n"
                            f"‚îú <b>–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã:</b> <code>{data['latitude']}, {data['longitude']}</code>\n"
                            f"‚îî <b>–ö–∞—Ä—Ç–∞:</b> <a href='https://www.google.com/maps/@{data['latitude']},{data['longitude']},15z'>—Å—Å—ã–ª–∫–∞</a>\n"
                            "\n<b>HURObot // @hurodev</b>"
                        )
                    else:
                        response = "<b>‚ú¶ –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ IP</b>"
                    await event.edit(response, parse_mode='html')
                except Exception as e:
                    await event.edit(f"<b>‚ú¶ –û—à–∏–±–∫–∞:</b>\n‚û§ <code>{str(e)}</code>", parse_mode='html')

            async def phone_lookup(event, phone):
                """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
                try:
                    response = requests.get(
                        f"https://htmlweb.ru/geo/api.php?json&telcod={phone}",
                        headers={"User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36"}
                    )
                    data = response.json()
                    
                    if 'limit' in data and data['limit'] == 0:
                        await event.edit("<b>‚ú¶ –õ–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤!\n‚û§ –í–∫–ª—é—á–∏—Ç–µ VPN</b>", parse_mode='html')
                        return

                    response_text = (
                        f"<b>‚ú¶ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–æ–º–µ—Ä–∞:</b>\n"
                        f"‚û§ <b>–¶–µ–ª—å:</b> <code>{phone}</code>\n"
                        f"‚îú <b>–°—Ç—Ä–∞–Ω–∞:</b> <code>{data.get('country', {}).get('name', 'N/A')}</code>\n"
                        f"‚îú <b>–û–ø–µ—Ä–∞—Ç–æ—Ä:</b> <code>{data.get('0', {}).get('oper', 'N/A')}</code>\n"
                        f"‚îî <b>–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å:</b> <code>{data.get('capital', {}).get('tz', 'N/A')}</code>\n"
                        "\n<b>HURObot // @hurodev</b>"
                    )
                    await event.edit(response_text, parse_mode='html')
                except Exception as e:
                    await event.edit(f"<b>‚ú¶ –û—à–∏–±–∫–∞:</b>\n‚û§ <code>{str(e)}</code>", parse_mode='html')

            async def mail_lookup(event, mail):
                """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—á—Ç—ã –Ω–∞ —É—Ç–µ—á–∫–∏"""
                try:
                    result = subprocess.run(
                        f"holehe {mail}",
                        capture_output=True,
                        text=True,
                        shell=True,
                        check=True
                    )
                    output = "\n".join([
                        line.replace("[x]", "üìõ")
                            .replace("[-]", "‚ùå")
                            .replace("[+]", "‚úÖ")
                            .replace("Email used", "<b>‚úîÔ∏è –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞</b>")
                            .replace("Email not used", "<b>‚ùå –ù–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞</b>")
                        for line in result.stdout.split('\n')[4:-4]
                    ])
                    await event.edit(
                        f"<b>‚ú¶ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ—á—Ç—ã {mail}:</b>\n{output}\n\n<b>HURObot // @hurodev</b>",
                        parse_mode='html'
                    )
                except Exception as e:
                    await event.edit(f"<b>‚ú¶ –û—à–∏–±–∫–∞:</b>\n‚û§<code>{str(e)}</code>", parse_mode='html')


            # 15. .whois - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–æ–º–µ–Ω–µ
            @client.on(events.NewMessage(outgoing=True, pattern=r'^\.whois(?:\s+(.+))?$'))
            async def whois_handler(event):
                state.last_user_activity = time.time()
                args = event.text.split(' ', 1)
                if len(args) < 2:
                    await event.edit(
                        "<b>‚ú¶ –£–∫–∞–∂–∏—Ç–µ –¥–æ–º–µ–Ω!\n‚û§ –ü—Ä–∏–º–µ—Ä:</b>\n‚û§ <code>.whois google.com</code>",
                        parse_mode='html'
                    )
                    return

                domain = args[1].strip()
                await event.edit(f"<b>‚ú¶ –ü—Ä–æ–≤–µ—Ä—è—é WHOIS –¥–ª—è:</b> <code>{domain}</code>", parse_mode='html')
                
                try:
                    domain_info = whois.whois(domain)
                    response = (
                        f"<b>‚ú¶ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã WHOIS:</b>\n"
                        f"‚û§ <b>–î–æ–º–µ–Ω:</b> <code>{domain_info.domain_name}</code>\n"
                        f"‚îú <b>–°–æ–∑–¥–∞–Ω:</b> <code>{domain_info.creation_date}</code>\n"
                        f"‚îú <b>–ò—Å—Ç–µ–∫–∞–µ—Ç:</b> <code>{domain_info.expiration_date}</code>\n"
                        f"‚îú <b>–†–µ–≥–∏—Å—Ç—Ä–∞—Ç–æ—Ä:</b> <code>{domain_info.registrar}</code>\n"
                        f"‚îú <b>–í–ª–∞–¥–µ–ª–µ—Ü:</b> <code>{domain_info.registrant_name or 'N/A'}</code>\n"
                        f"‚îî <b>–°–µ—Ä–≤–µ—Ä—ã:</b> <code>{', '.join(domain_info.name_servers) if domain_info.name_servers else 'N/A'}</code>\n"
                        "\n<b>HURObot // @hurodev</b>"
                    )
                    await event.edit(response, parse_mode='html')
                except Exception as e:
                    await event.edit(f"<b>‚ú¶ –û—à–∏–±–∫–∞:</b>\n‚û§<code>{str(e)}</code>", parse_mode='html')

            # 14. .help - –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º
            @client.on(events.NewMessage(outgoing=True, pattern=r'^\.help(?:\s+([a-zA-Z]+))?$'))
            async def help_handler(event):
                state.last_user_activity = time.time()
                command = event.pattern_match.group(1)
                if not command:
                    help_text = """
‚ú¶ –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:

‚û§ `.help` - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ –º–µ–Ω—é
‚û§ `.onl` [on/off] - –í–µ—á–Ω—ã–π –æ–Ω–ª–∞–π–Ω 
‚û§ `.sonl` [on/off] - –ú–∏–≥–∞—é—â–∏–π –æ–Ω–ª–∞–π–Ω 
‚û§ `.save` - –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–∞–º–æ—É–¥–∞–ª—è—é—â–µ–µ—Å—è —Ñ–æ—Ç–æ
‚û§ `.clone` [url] - –ö–ª–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å—Ç 
‚û§ `.short` [url] - –°–æ–∫—Ä–∞—Ç–∏—Ç—å —Å—Å—ã–ª–∫—É 
‚û§ `.delme` - –£–¥–∞–ª–∏—Ç—å –ø–µ—Ä–µ–ø–∏—Å–∫—É
‚û§ `.ani` [on/off] - –ê–Ω–∏–º–∞—Ü–∏—è –Ω–∞–±–æ—Ä–∞ 
‚û§ `.sti` [—á–∏—Å–ª–æ] - –°–ø–∞–º —Å—Ç–∏–∫–µ—Ä–∞–º–∏ 
‚û§ `.tagall` - –£–ø–æ–º—è–Ω—É—Ç—å –≤—Å–µ—Ö
‚û§ `.iter` [-n] - –≠–∫—Å–ø–æ—Ä—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ 
‚û§ `.up` [—á–∏—Å–ª–æ] - –ü–µ—Ä–µ—É–ø–æ–º–∏–Ω–∞–Ω–∏—è 
‚û§ `.data` - –ò–Ω—Ñ–æ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
‚û§ `.osint` [—Ç–µ–ª–µ—Ñ–æ–Ω/ip/–ø–æ—á—Ç–∞] - –ø—Ä–æ–±–∏–≤
‚û§ `.whois` [–¥–æ–º–µ–Ω] - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–æ–º–µ–Ω–µ
‚û§ –î–ª—è —Å–ø—Ä–∞–≤–∫–∏: `.help [–Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã]`

**HURObot // @hurodev**
                    """
                    await event.edit(help_text)
                    return
                command = command.lower()
                if command in command_info:
                    info = command_info[command]
                    help_text = f"‚ú¶ –ö–æ–º–∞–Ω–¥–∞: {info['name']}\n" \
                               f"\n" \
                               f"‚û§ –û–ø–∏—Å–∞–Ω–∏–µ: {info['description']}\n" \
                               f"‚û§ –°–∏–Ω—Ç–∞–∫—Å–∏—Å: {info['syntax']}\n" \
                               f"‚û§ –ü—Ä–∏–º–µ—Ä: {info['example']}\n" \
                               "\n" \
                               "**HURObot // @hurodev**"
                    await event.edit(help_text)
                else:
                    await event.edit(f"‚ú¶ –û—à–∏–±–∫–∞\n"
                                   f"‚û§ –ö–æ–º–∞–Ω–¥–∞ '{command}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞\n"
                                   f"‚û§ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: `.help` –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥\n"
                                   "\n"
                                   "**HURObot // @hurodev**")

            # –í—ã–≤–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞
            clear_screen()
            show_banner()
            print(f"{COLORS['success']}–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!{COLORS['reset']}")
            print(f"{COLORS['prompt']}–ê–∫–∫–∞—É–Ω—Ç: {name} (+{phone}){COLORS['reset']}")
            print(f"{COLORS['header']}  .help -- —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥{COLORS['reset']}")
            print(f"{COLORS['header']}  .help [–Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã] -- —Å–ø—Ä–∞–≤–∫–∞{COLORS['reset']}")
            print(f"{COLORS['accent2']}‚ïê{COLORS['reset']}" * 50)
            await client.run_until_disconnected()

    except Exception as e:
        print(f"{COLORS['error']}–û—à–∏–±–∫–∞: {str(e)}{COLORS['reset']}")
    finally:
        running = False
        input_task.cancel()

# -------------------------------
# –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ
# -------------------------------
async def main_menu():
    """–û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏."""
    # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    try:
        clear_screen()
        show_banner()
        if await force_update():
            return
    except:
        pass

    while True:
        clear_screen()
        show_banner()
        await load_valid_accounts()
        accounts = sorted(ACCOUNT_DATA.keys())
        print(f"{COLORS['header']}–î–æ—Å—Ç—É–ø–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã:{COLORS['reset']}")
        if accounts:
            for num in accounts:
                print(f"{COLORS['input']}{num}.{COLORS['reset']} {COLORS['info']}{ACCOUNT_DATA[num]['name']} (+{ACCOUNT_DATA[num]['phone']}){COLORS['reset']}")
        else:
            print(f"{COLORS['error']}–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤{COLORS['reset']}")     
        print(f"\n")
        print(f"{COLORS['header']}0. –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç")
        print(f"-. –£–¥–∞–ª–∏—Ç—å –≤—Å–µ –∞–∫–∫–∞—É–Ω—Ç—ã")
        print(f"{COLORS['accent2']}‚ïê{COLORS['reset']}" * 50)
        
        choice = input(f"{COLORS['prompt']}–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: {COLORS['reset']}")
        
        if choice == "0":
            await create_account()
            input(f"{COLORS['input']}–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...{COLORS['reset']}")
        elif choice == "-":
            await delete_all_accounts()
        elif choice.isdigit() and int(choice) in accounts:
            await run_account(int(choice))
        else:
            print(f"{COLORS['error']}–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä!{COLORS['reset']}")
            await asyncio.sleep(1)

if __name__ == "__main__":
    try:
        asyncio.run(main_menu())
    except KeyboardInterrupt:
        print(f"\n{COLORS['header']}–†–∞–±–æ—Ç–∞ —Å–∫—Ä–∏–ø—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞{COLORS['reset']}")
        sys.exit(0)
    except Exception as e:
        print(f"{COLORS['error']}–§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}{COLORS['reset']}")
        sys.exit(1)
