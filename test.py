# HURObot - –ü–æ–ª–Ω—ã–π –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –∫–æ–¥ (17 –ú–∞—è 2025) —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º
import os
import asyncio
import sys
import random
import time
import requests
import re
import urllib.request
import hashlib
import subprocess
from getpass import getpass
from datetime import datetime
import pytz
from telethon import TelegramClient, events
from telethon.errors import (
    FloodWaitError,
    PhoneNumberInvalidError,
    PhoneCodeInvalidError,
    SessionPasswordNeededError,
    MessageNotModifiedError
)
from telethon.tl.functions.account import UpdateStatusRequest
from telethon.tl.functions.messages import DeleteHistoryRequest
from telethon.tl.functions.users import GetFullUserRequest
from telethon.tl.types import DocumentAttributeFilename
from PIL import Image
import io
import telethon
import phonenumbers
from phonenumbers import carrier, geocoder, timezone
import qrcode
from pyfiglet import Figlet
import yt_dlp
import socket
import whois
from googletrans import Translator
import math

# ======================
# –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø
# ======================
GITHUB_RAW_URL = "https://raw.githubusercontent.com/rud1x/HuroBot_tg/main/hurobot.py"
VERSION_PATTERN = r"# HURObot - –ü–æ–ª–Ω—ã–π –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –∫–æ–¥ \((\d{1,2} \w+ \d{4})\)"

# –§–∏–æ–ª–µ—Ç–æ–≤–∞—è –ø–∞–ª–∏—Ç—Ä–∞ —Ü–≤–µ—Ç–æ–≤ –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏
COLORS = {
    'header': '\033[38;2;186;85;211m',     # –Ø—Ä–∫–∏–π —Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–π
    'input': '\033[38;2;230;230;250m',     # –õ–∞–≤–∞–Ω–¥–æ–≤—ã–π
    'success': '\033[38;2;221;160;221m',   # –†–æ–∑–æ–≤–∞—Ç–æ-—Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–π
    'error': '\033[38;2;255;0;255m',       # –Ø—Ä–∫–∏–π –ø—É—Ä–ø—É—Ä–Ω—ã–π
    'info': '\033[38;2;147;112;219m',      # –°—Ä–µ–¥–Ω–µ-—Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–π
    'prompt': '\033[38;2;218;112;214m',    # –û—Ä—Ö–∏–¥–µ—è
    'accent1': '\033[38;2;138;43;226m',    # –°–∏–Ω–µ-—Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–π
    'accent2': '\033[38;2;148;0;211m',     # –¢–µ–º–Ω—ã–π —Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–π
    'accent3': '\033[38;2;153;50;204m',    # –¢–µ–º–Ω–∞—è –æ—Ä—Ö–∏–¥–µ—è
    'reset': '\033[0m'                     # –°–±—Ä–æ—Å —Ü–≤–µ—Ç–∞
}

API_ID = 21551581  
API_HASH = '70d80bdf86811654363e45c01c349e98'  
SESSION_PREFIX = "account_"
TEMP_SESSION = "temp.session"
ACCOUNT_DATA = {}

# ======================
# –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò
# ======================
def show_banner():
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –±–∞–Ω–Ω–µ—Ä HURObot –≤ –∫–æ–Ω—Å–æ–ª–∏."""
    try:
        with open(__file__, 'r', encoding='utf-8') as f:
            content = f.read()
            version = re.search(VERSION_PATTERN, content).group(1)
    except:
        version = "N/A"
    
    print(f"""{COLORS['header']}
‚ñà‚ñà‚ïó‚ñë‚ñë‚ñà‚ñà‚ïó‚ñà‚ñà‚ïó‚ñë‚ñë‚ñë‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñë‚ñë‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñë‚ñë‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó
‚ñà‚ñà‚ïë‚ñë‚ñë‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë‚ñë‚ñë‚ñë‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ïö‚ïê‚ïê‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù
‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë‚ñë‚ñë‚ñë‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïë‚ñë‚ñë‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïë‚ñë‚ñë‚ñà‚ñà‚ïë‚ñë‚ñë‚ñë‚ñà‚ñà‚ïë‚ñë‚ñë‚ñë
‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë‚ñë‚ñë‚ñë‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë‚ñë‚ñë‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë‚ñë‚ñë‚ñà‚ñà‚ïë‚ñë‚ñë‚ñë‚ñà‚ñà‚ïë‚ñë‚ñë‚ñë
‚ñà‚ñà‚ïë‚ñë‚ñë‚ñà‚ñà‚ïë‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïë‚ñë‚ñë‚ñà‚ñà‚ïë‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñë‚ñë‚ñë‚ñà‚ñà‚ïë‚ñë‚ñë‚ñë
‚ïö‚ïê‚ïù‚ñë‚ñë‚ïö‚ïê‚ïù‚ñë‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù‚ñë‚ïö‚ïê‚ïù‚ñë‚ñë‚ïö‚ïê‚ïù‚ñë‚ïö‚ïê‚ïê‚ïê‚ïê‚ïù‚ñë‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù‚ñë‚ñë‚ïö‚ïê‚ïê‚ïê‚ïê‚ïù‚ñë‚ñë‚ñë‚ñë‚ïö‚ïê‚ïù‚ñë‚ñë‚ñë

–í–µ—Ä—Å–∏—è: {version}
–¢–µ–ª–µ–≥—Ä–∞–º–º –∫–∞–Ω–∞–ª - @hurodev
{COLORS['reset']}""")
    print(f"{COLORS['accent2']}‚ïê{COLORS['reset']}" * 50)

async def force_update():
    """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–∞."""
    try:
        print(f"\n{COLORS['header']}–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç–∏ —Ñ–∞–π–ª–æ–≤...{COLORS['reset']}")
        with urllib.request.urlopen(GITHUB_RAW_URL) as response:
            remote_content = response.read().decode('utf-8')
            remote_version = re.search(VERSION_PATTERN, remote_content).group(1)
            
        with open(__file__, 'r', encoding='utf-8') as f:
            current_content = f.read()
            current_version = re.search(VERSION_PATTERN, current_content).group(1)
            
        if hashlib.md5(current_content.encode()).hexdigest() == hashlib.md5(remote_content.encode()).hexdigest():
            return False
            
        print(f"\n{COLORS['success']}–ù–∞–π–¥–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ!{COLORS['reset']}")
        print(f"{COLORS['info']}–¢–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è: {current_version}{COLORS['reset']}")
        print(f"{COLORS['success']}–ù–æ–≤–∞—è –≤–µ—Ä—Å–∏—è: {remote_version}{COLORS['reset']}")
        print(f"\n{COLORS['header']}–ó–∞–≥—Ä—É–∂–∞—é –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ...{COLORS['reset']}")
        
        temp_file = "hurobot_temp.py"
        with open(temp_file, 'w', encoding='utf-8') as f:
            f.write(remote_content)
            
        os.replace(temp_file, __file__)
        
        print(f"{COLORS['success']}‚úì –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ!{COLORS['reset']}")
        print(f"{COLORS['info']}–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞—é —Å–∫—Ä–∏–ø—Ç...{COLORS['reset']}")
        subprocess.Popen([sys.executable, __file__])
        sys.exit(0)
        
    except Exception as e:
        print(f"{COLORS['error']}‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏: {str(e)}{COLORS['reset']}")
        return False

def clear_screen():
    """–û—á–∏—â–∞–µ—Ç —ç–∫—Ä–∞–Ω –∫–æ–Ω—Å–æ–ª–∏."""
    os.system('cls' if os.name == 'nt' else 'clear')

async def safe_delete(file_path):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ —É–¥–∞–ª—è–µ—Ç —Ñ–∞–π–ª."""
    try:
        if os.path.exists(file_path):
            os.remove(file_path)
            return True
    except Exception as e:
        print(f"{COLORS['error']}–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {str(e)}{COLORS['reset']}")
    return False

async def load_valid_accounts():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –≤—Å–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã."""
    global ACCOUNT_DATA
    ACCOUNT_DATA = {}
    for session_file in os.listdir('.'):
        if session_file.startswith(SESSION_PREFIX) and session_file.endswith(".session"):
            try:
                async with TelegramClient(session_file, API_ID, API_HASH) as client:
                    if await client.is_user_authorized():
                        me = await client.get_me()
                        account_id = int(session_file.split('_')[1].split('.')[0])
                        ACCOUNT_DATA[account_id] = {
                            'phone': me.phone,
                            'name': me.username or me.first_name or f"–ê–∫–∫–∞—É–Ω—Ç {account_id}",
                            'session': session_file
                        }
            except Exception as e:
                print(f"{COLORS['error']}–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–µ—Å—Å–∏–∏ {session_file}: {str(e)}{COLORS['reset']}")
                await safe_delete(session_file)
                continue

async def delete_all_accounts():
    """–£–¥–∞–ª—è–µ—Ç –≤—Å–µ –∞–∫–∫–∞—É–Ω—Ç—ã."""
    deleted = 0
    for account_num in list(ACCOUNT_DATA.keys()):
        session_file = ACCOUNT_DATA[account_num]['session']
        if await safe_delete(session_file):
            del ACCOUNT_DATA[account_num]
            deleted += 1
    print(f"{COLORS['success']}–£–¥–∞–ª–µ–Ω–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {deleted}{COLORS['reset']}")
    await asyncio.sleep(1)

async def create_account():
    """–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç."""
    clear_screen()
    show_banner()
    print(f"{COLORS['header']}–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞{COLORS['reset']}")
    print(f"{COLORS['accent2']}‚ïê{COLORS['reset']}" * 50)

    client = None
    try:
        await safe_delete(TEMP_SESSION)
        
        while True:
            phone = input(f"{COLORS['prompt']}–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä (+–∫–æ–¥ —Å—Ç—Ä–∞–Ω—ã –Ω–æ–º–µ—Ä, –ø—Ä–∏–º–µ—Ä: +79123456789): {COLORS['reset']}").strip()
            if re.match(r'^\+\d{8,15}$', phone):
                break
            print(f"{COLORS['error']}‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –ü—Ä–∏–º–µ—Ä: +79123456789{COLORS['reset']}")

        if any(acc['phone'] == phone for acc in ACCOUNT_DATA.values()):
            print(f"{COLORS['error']}‚ùå –≠—Ç–æ—Ç –Ω–æ–º–µ—Ä —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!{COLORS['reset']}")
            await asyncio.sleep(1)
            return

        client = TelegramClient(TEMP_SESSION, API_ID, API_HASH)
        await client.connect()

        sent_code = await client.send_code_request(phone)
        print(f"\n{COLORS['success']}‚úì –ö–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ {phone}{COLORS['reset']}")

        code = input(f"{COLORS['prompt']}–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∏–∑ Telegram: {COLORS['reset']}").strip().replace(' ', '')

        try:
            await client.sign_in(phone, code=code, phone_code_hash=sent_code.phone_code_hash)
        except SessionPasswordNeededError:
            password = getpass(f"{COLORS['prompt']}üîê –í–≤–µ–¥–∏—Ç–µ 2FA –ø–∞—Ä–æ–ª—å (—Å–∫—Ä—ã—Ç): {COLORS['reset']}")
            await client.sign_in(password=password)

        me = await client.get_me()
        account_id = max(ACCOUNT_DATA.keys(), default=0) + 1
        new_session = f"{SESSION_PREFIX}{account_id}.session"
        
        await client.disconnect()
        await asyncio.sleep(1)

        if os.path.exists(TEMP_SESSION):
            if os.path.exists(new_session):
                os.remove(new_session)
            os.rename(TEMP_SESSION, new_session)

        ACCOUNT_DATA[account_id] = {
            'phone': phone,
            'name': me.first_name or me.username or f"–ê–∫–∫–∞—É–Ω—Ç {account_id}",
            'session': new_session
        }

        print(f"\n{COLORS['success']}‚úì –£—Å–ø–µ—à–Ω–æ! {me.first_name} –¥–æ–±–∞–≤–ª–µ–Ω{COLORS['reset']}")
        await load_valid_accounts()

    except PhoneNumberInvalidError:
        print(f"{COLORS['error']}‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞!{COLORS['reset']}")
    except PhoneCodeInvalidError:
        print(f"{COLORS['error']}‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è!{COLORS['reset']}")
    except Exception as e:
        print(f"{COLORS['error']}‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}{COLORS['reset']}")
        import traceback
        traceback.print_exc()
    finally:
        if client and client.is_connected():
            await client.disconnect()
        await safe_delete(TEMP_SESSION)
    
    input(f"\n{COLORS['input']}–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...{COLORS['reset']}")

def compress_image(image_bytes):
    """–°–∂–∏–º–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ."""
    try:
        img = Image.open(io.BytesIO(image_bytes))
        img = img.convert('RGB')
        img.thumbnail((500, 500), Image.Resampling.LANCZOS)
        output = io.BytesIO()
        img.save(output, format='JPEG', quality=85)
        return output.getvalue()
    except Exception as e:
        print(f"{COLORS['error']}–û—à–∏–±–∫–∞ —Å–∂–∞—Ç–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {str(e)}{COLORS['reset']}")
        return image_bytes

def get_moscow_time():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ –ú–æ—Å–∫–≤–µ."""
    return datetime.now(pytz.timezone('Europe/Moscow')).strftime('%Y-%m-%d %H:%M:%S')

async def save_self_destruct_photo(client, event):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–∞–º–æ—É–¥–∞–ª—è—é—â–µ–µ—Å—è —Ñ–æ—Ç–æ."""
    try:
        if not event.is_private:
            return False

        ttl = getattr(event, 'ttl_seconds', None) or getattr(event.media, 'ttl_seconds', None)
        if not ttl or ttl <= 0:
            return False

        if not hasattr(event.media, 'photo'):
            return False

        media_bytes = await client.download_media(event.media, file=bytes)
        if not media_bytes:
            return False

        compressed_bytes = compress_image(media_bytes)

        sender = await event.get_sender()
        username = sender.username or sender.first_name or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å"
        caption = (
            f"‚ú¶ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ —Å–∞–º–æ—É–¥–∞–ª—è—é—â–µ–µ—Å—è —Ñ–æ—Ç–æ\n"
            f"‚û§ –û—Ç: {username}\n"
            f"‚û§ –í—Ä–µ–º—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è (–ú–°–ö): {get_moscow_time()}\n"
            f"‚û§ ID —Å–æ–æ–±—â–µ–Ω–∏—è: {event.id}\n"
            "\n"
            "**HURObot // @hurodev**"
        )

        await client.send_file(
            'me',
            compressed_bytes,
            caption=caption,
            force_document=False,
            attributes=[DocumentAttributeFilename(file_name=f"self_destruct_{event.id}.jpg")]
        )

        return True
    except Exception as e:
        print(f"{COLORS['error']}–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–æ—Ç–æ: {str(e)}{COLORS['reset']}")
    return False

async def shorten_url(url):
    """–°–æ–∫—Ä–∞—â–∞–µ—Ç URL —á–µ—Ä–µ–∑ tinyurl."""
    try:
        response = requests.get(f"http://tinyurl.com/api-create.php?url={url}", timeout=10)
        response.raise_for_status()
        return response.text
    except requests.RequestException as e:
        print(f"{COLORS['error']}–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∫—Ä–∞—â–µ–Ω–∏–∏ URL: {str(e)}{COLORS['reset']}")
        return url

# ======================
# –ù–û–í–´–ï –§–£–ù–ö–¶–ò–û–ù–ê–õ–¨–ù–´–ï –ú–û–î–£–õ–ò
# ======================
async def translate_text(text, dest='ru'):
    """–ü–µ—Ä–µ–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞."""
    try:
        translator = Translator()
        return translator.translate(text, dest=dest).text
    except Exception as e:
        print(f"{COLORS['error']}–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞: {str(e)}{COLORS['reset']}")
        return text

async def generate_qr_code(text):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è QR-–∫–æ–¥–∞."""
    try:
        img = qrcode.make(text)
        img.save("qr_code.png")
        return True
    except Exception as e:
        print(f"{COLORS['error']}–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR: {str(e)}{COLORS['reset']}")
        return False

async def text_to_ascii(text, font='slant'):
    """–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ ASCII-–∞—Ä—Ç."""
    try:
        fig = Figlet(font=font)
        return fig.renderText(text)
    except Exception as e:
        print(f"{COLORS['error']}–û—à–∏–±–∫–∞ ASCII-–∞—Ä—Ç–∞: {str(e)}{COLORS['reset']}")
        return text

async def download_media(url):
    """–°–∫–∞—á–∏–≤–∞–Ω–∏–µ –º–µ–¥–∏–∞."""
    try:
        ydl_opts = {'format': 'best', 'quiet': True}
        with yt_dlp.YoutubeDL(ydl_opts) as ydl:
            info = ydl.extract_info(url, download=True)
            return ydl.prepare_filename(info)
    except Exception as e:
        print(f"{COLORS['error']}–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {str(e)}{COLORS['reset']}")
        return None

async def get_ip_info(ip):
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± IP."""
    try:
        info = {
            'IP': ip,
            'Hostname': socket.gethostbyaddr(ip)[0],
            'Country': requests.get(f"http://ip-api.com/json/{ip}").json().get('country', 'N/A')
        }
        return "\n".join([f"{k}: {v}" for k, v in info.items()])
    except Exception as e:
        print(f"{COLORS['error']}–û—à–∏–±–∫–∞ IP-–∏–Ω—Ñ–æ: {str(e)}{COLORS['reset']}")
        return f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {ip}"

async def get_whois_info(domain):
    """WHOIS –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è."""
    try:
        w = whois.whois(domain)
        return str(w)
    except Exception as e:
        print(f"{COLORS['error']}–û—à–∏–±–∫–∞ WHOIS: {str(e)}{COLORS['reset']}")
        return f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è WHOIS –¥–ª—è {domain}"

async def deanonymize(target):
    """–î–µ–∞–Ω–æ–Ω–∏–º–∏–∑–∞—Ü–∏—è."""
    result = []
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    if re.match(r'^[\d\+][\d\s\-\(\)]{7,}$', target):
        try:
            phone = phonenumbers.parse(target)
            result.append(f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {phonenumbers.format_number(phone, phonenumbers.PhoneNumberFormat.INTERNATIONAL)}")
            result.append(f"üì° –û–ø–µ—Ä–∞—Ç–æ—Ä: {carrier.name_for_number(phone, 'ru')}")
            result.append(f"üåç –†–µ–≥–∏–æ–Ω: {geocoder.description_for_number(phone, 'ru')}")
        except:
            result.append("‚ö†Ô∏è –ù–æ–º–µ—Ä –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ email
    elif '@' in target:
        result.append(f"üìß Email: {target}")
        try:
            resp = requests.get(f"https://haveibeenpwned.com/api/v3/breachedaccount/{target}", timeout=5)
            if resp.status_code == 200:
                breaches = [b['Name'] for b in resp.json()]
                result.append(f"‚ö†Ô∏è –ù–∞–π–¥–µ–Ω –≤ {len(breaches)} —É—Ç–µ—á–∫–∞—Ö: {', '.join(breaches)}")
        except:
            result.append("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —É—Ç–µ—á–µ–∫")
    
    # –ü–æ–∏—Å–∫ –ø–æ username
    else:
        username = target.replace('@', '')
        result.append(f"üë§ –ù–∏–∫–Ω–µ–π–º: @{username}")
        result.append(f"üîó Telegram: https://t.me/{username}")
        result.append(f"üîé Google: https://www.google.com/search?q={username}")
        result.append(f"üíª GitHub: https://github.com/{username}")
        result.append(f"üî¥ VK: https://vk.com/{username}")
    
    return "\n".join(result)

async def calculate_expression(expr):
    """–í—ã—á–∏—Å–ª–µ–Ω–∏–µ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –≤—ã—Ä–∞–∂–µ–Ω–∏—è."""
    try:
        allowed_chars = set('0123456789+-*/(). ')
        if not all(c in allowed_chars for c in expr):
            return None
        return str(eval(expr))
    except:
        return None

# ======================
# –ö–õ–ê–°–° –°–û–°–¢–û–Ø–ù–ò–Ø –ö–õ–ò–ï–ù–¢–ê
# ======================
class ClientState:
    """–•—Ä–∞–Ω–∏—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞."""
    def __init__(self):
        self.typing_animation = False
        self.active_animation = None
        self.animation_lock = asyncio.Lock()
        self.keep_online = False
        self.spam_online = False
        self.pending_confirmation = {}
        self.online_task = None
        self.spam_online_task = None
        self.current_message_id = None
        self.last_user_activity = 0

    async def stop_animation(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∞–Ω–∏–º–∞—Ü–∏—é."""
        async with self.animation_lock:
            if self.active_animation:
                self.active_animation.cancel()
                try:
                    await self.active_animation
                except (asyncio.CancelledError, Exception):
                    pass
                self.active_animation = None
            self.current_message_id = None

# ======================
# –û–°–ù–û–í–ù–ê–Ø –õ–û–ì–ò–ö–ê –ë–û–¢–ê
# ======================
async def run_account(account_num):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∞–∫–∫–∞—É–Ω—Ç —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –∫–æ–º–∞–Ω–¥."""
    session_file = ACCOUNT_DATA[account_num]['session']
    phone = ACCOUNT_DATA[account_num]['phone']
    name = ACCOUNT_DATA[account_num]['name']
    running = True
    
    async def console_input_listener():
        nonlocal running
        while running:
            user_input = await asyncio.get_event_loop().run_in_executor(
                None, input, 
                f"{COLORS['input']}–í–≤–µ–¥–∏—Ç–µ 1 –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é: {COLORS['reset']}"
            )
            if user_input.strip() == '1':
                running = False
                await client.disconnect()

    try:
        async with TelegramClient(session_file, API_ID, API_HASH) as client:
            state = ClientState()
            client._hurobot_state = state
            input_task = asyncio.create_task(console_input_listener())

            async def keep_online_task():
                while state.keep_online and client.is_connected():
                    try:
                        await client(UpdateStatusRequest(offline=False))
                        await asyncio.sleep(random.randint(30, 40))
                    except FloodWaitError as e:
                        print(f"{COLORS['error']}FloodWait: {e.seconds} —Å–µ–∫{COLORS['reset']}")
                        await asyncio.sleep(e.seconds + 5)
                    except Exception as e:
                        print(f"{COLORS['error']}–û—à–∏–±–∫–∞ –æ–Ω–ª–∞–π–Ω–∞: {str(e)}{COLORS['reset']}")
                        await asyncio.sleep(60)

            async def spam_online_task():
                while state.spam_online and client.is_connected():
                    try:
                        if time.time() - state.last_user_activity < 60:
                            await asyncio.sleep(10)
                            continue
                        online = random.choice([True, False])
                        await client(UpdateStatusRequest(offline=not online))
                        await asyncio.sleep(1)
                    except FloodWaitError as e:
                        print(f"{COLORS['error']}FloodWait: {e.seconds} —Å–µ–∫{COLORS['reset']}")
                        await asyncio.sleep(e.seconds + 5)
                    except Exception as e:
                        print(f"{COLORS['error']}–û—à–∏–±–∫–∞ –º–∏–≥–∞—é—â–µ–≥–æ –æ–Ω–ª–∞–π–Ω–∞: {str(e)}{COLORS['reset']}")
                        await asyncio.sleep(10)

            # –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ (–≤—Å–µ 21 –∫–æ–º–∞–Ω–¥)
            @client.on(events.NewMessage(func=lambda e: e.is_private))
            async def auto_save(event):
                await save_self_destruct_photo(client, event)

            @client.on(events.NewMessage(outgoing=True, pattern=r'^\.save$'))
            async def manual_save(event):
                state.last_user_activity = time.time()
                if not event.is_reply:
                    await event.edit("‚ú¶ –û—à–∏–±–∫–∞\n‚û§ –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–∞–º–æ—É–¥–∞–ª—è—é—â–µ–µ—Å—è —Ñ–æ—Ç–æ\n\n**HURObot // @hurodev**")
                    return
                reply = await event.get_reply_message()
                if not (hasattr(reply.media, 'photo') and (getattr(reply, 'ttl_seconds', None) or getattr(reply.media, 'ttl_seconds', None))):
                    await event.edit("‚ú¶ –û—à–∏–±–∫–∞\n‚û§ –≠—Ç–æ –Ω–µ —Å–∞–º–æ—É–¥–∞–ª—è—é—â–µ–µ—Å—è —Ñ–æ—Ç–æ\n\n**HURObot // @hurodev**")
                    return
                try:
                    media_bytes = await client.download_media(reply.media, file=bytes)
                    compressed_bytes = compress_image(media_bytes)
                    sender = await reply.get_sender()
                    username = sender.username or sender.first_name or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å"
                    caption = (
                        f"‚ú¶ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ —Å–∞–º–æ—É–¥–∞–ª—è—é—â–µ–µ—Å—è —Ñ–æ—Ç–æ\n"
                        f"‚û§ –û—Ç: {username}\n"
                        f"‚û§ –í—Ä–µ–º—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è (–ú–°–ö): {get_moscow_time()}\n"
                        f"‚û§ ID —Å–æ–æ–±—â–µ–Ω–∏—è: {reply.id}\n"
                        "\n"
                        "**HURObot // @hurodev**"
                    )
                    await client.send_file('me', compressed_bytes, caption=caption, force_document=False)
                    await event.delete()
                except Exception as e:
                    await event.edit(f"‚ú¶ –û—à–∏–±–∫–∞\n‚û§ {str(e)}\n\n**HURObot // @hurodev**")

            @client.on(events.NewMessage(outgoing=True, pattern=r'^\.onl(?:\s+(on|off))?$'))
            async def online_handler(event):
                state.last_user_activity = time.time()
                action = event.pattern_match.group(1)
                if not action:
                    status = "–≤–∫–ª—é—á—ë–Ω" if state.keep_online else "–≤—ã–∫–ª—é—á–µ–Ω"
                    await event.edit(f"‚ú¶ –í–µ—á–Ω—ã–π –æ–Ω–ª–∞–π–Ω: {status}\n‚û§ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: .onl on/off\n\n**HURObot // @hurodev**")
                    return
                try:
                    new_state = action.lower() == 'on'
                    if new_state == state.keep_online:
                        status = "—É–∂–µ " + ("–≤–∫–ª—é—á—ë–Ω" if state.keep_online else "–≤—ã–∫–ª—é—á–µ–Ω")
                        await event.edit(f"‚ú¶ –í–µ—á–Ω—ã–π –æ–Ω–ª–∞–π–Ω {status}\n\n**HURObot // @hurodev**")
                        return
                    state.keep_online = new_state
                    status = "–≤–∫–ª—é—á—ë–Ω" if state.keep_online else "–≤—ã–∫–ª—é—á–µ–Ω"
                    if state.keep_online and state.spam_online:
                        state.spam_online = False
                        if state.spam_online_task:
                            state.spam_online_task.cancel()
                            state.spam_online_task = None
                    await event.edit(f"‚ú¶ –í–µ—á–Ω—ã–π –æ–Ω–ª–∞–π–Ω {status}\n\n**HURObot // @hurodev**")
                    if state.keep_online:
                        state.online_task = asyncio.create_task(keep_online_task())
                    elif state.online_task:
                        state.online_task.cancel()
                        state.online_task = None
                except Exception as e:
                    await event.edit(f"‚ú¶ –û—à–∏–±–∫–∞\n‚û§ {str(e)}\n\n**HURObot // @hurodev**")

            @client.on(events.NewMessage(outgoing=True, pattern=r'^\.sonl(?:\s+(on|off))?$'))
            async def sonl_handler(event):
                state.last_user_activity = time.time()
                action = event.pattern_match.group(1)
                if not action:
                    status = "–≤–∫–ª—é—á—ë–Ω" if state.spam_online else "–≤—ã–∫–ª—é—á–µ–Ω"
                    await event.edit(f"‚ú¶ –ú–∏–≥–∞—é—â–∏–π –æ–Ω–ª–∞–π–Ω: {status}\n‚û§ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: .sonl on/off\n\n**HURObot // @hurodev**")
                    return
                try:
                    new_state = action.lower() == 'on'
                    if new_state == state.spam_online:
                        status = "—É–∂–µ " + ("–≤–∫–ª—é—á—ë–Ω" if state.spam_online else "–≤—ã–∫–ª—é—á–µ–Ω")
                        await event.edit(f"‚ú¶ –ú–∏–≥–∞—é—â–∏–π –æ–Ω–ª–∞–π–Ω {status}\n\n**HURObot // @hurodev**")
                        return
                    if new_state and state.keep_online:
                        await event.edit("‚ú¶ –û—à–∏–±–∫–∞\n‚û§ –°–Ω–∞—á–∞–ª–∞ –≤—ã–∫–ª—é—á–∏—Ç–µ –≤–µ—á–Ω—ã–π –æ–Ω–ª–∞–π–Ω (.onl off)\n\n**HURObot // @hurodev**")
                        return
                    state.spam_online = new_state
                    status = "–≤–∫–ª—é—á—ë–Ω" if state.spam_online else "–≤—ã–∫–ª—é—á–µ–Ω"
                    await event.edit(f"‚ú¶ –ú–∏–≥–∞—é—â–∏–π –æ–Ω–ª–∞–π–Ω {status}\n\n**HURObot // @hurodev**")
                    if state.spam_online:
                        state.spam_online_task = asyncio.create_task(spam_online_task())
                    elif state.spam_online_task:
                        state.spam_online_task.cancel()
                        state.spam_online_task = None
                except Exception as e:
                    await event.edit(f"‚ú¶ –û—à–∏–±–∫–∞\n‚û§ {str(e)}\n\n**HURObot // @hurodev**")

            @client.on(events.NewMessage(outgoing=True, pattern=r'^\.clone(?:\s+(.+))?$'))
            async def clone_handler(event):
                state.last_user_activity = time.time()
                post_link = event.pattern_match.group(1)
                if not post_link:
                    await event.edit("‚ú¶ –û—à–∏–±–∫–∞\n‚û§ –£–∫–∞–∂–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ—Å—Ç\n\n**HURObot // @hurodev**")
                    return
                try:
                    parts = post_link.split('/')
                    channel = parts[-2]
                    post_id = int(parts[-1])
                    entity = await client.get_entity(channel)
                    message = await client.get_messages(entity, ids=post_id)
                    if message.media:
                        await client.send_file('me', message.media, caption=message.text or '')
                    else:
                        await client.send_message('me', message.text or '–ü—É—Å—Ç–æ–π –ø–æ—Å—Ç')
                    await event.edit("‚ú¶ –ü–æ—Å—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ \"–ò–∑–±—Ä–∞–Ω–Ω–æ–µ\"\n\n**HURObot // @hurodev**")
                except Exception as e:
                    await event.edit(f"‚ú¶ –û—à–∏–±–∫–∞\n‚û§ {str(e)}\n\n**HURObot // @hurodev**")

            @client.on(events.NewMessage(outgoing=True, pattern=r'^\.short(?:\s+(.+))?$'))
            async def short_handler(event):
                state.last_user_activity = time.time()
                url = event.pattern_match.group(1)
                if not url:
                    await event.edit("‚ú¶ –û—à–∏–±–∫–∞\n‚û§ –£–∫–∞–∂–∏—Ç–µ URL –¥–ª—è —Å–æ–∫—Ä–∞—â–µ–Ω–∏—è\n\n**HURObot // @hurodev**")
                    return
                try:
                    short_url = await shorten_url(url)
                    await event.edit(f"‚ú¶ –°–æ–∫—Ä–∞—â—ë–Ω–Ω–∞—è —Å—Å—ã–ª–∫–∞:\n‚û§ {short_url}\n\n**HURObot // @hurodev**")
                except Exception as e:
                    await event.edit(f"‚ú¶ –û—à–∏–±–∫–∞\n‚û§ {str(e)}\n\n**HURObot // @hurodev**")

            @client.on(events.NewMessage(outgoing=True, pattern=r'^\.delme(?:\s+(\d+))?$'))
            async def delme_handler(event):
                state.last_user_activity = time.time()
                code = event.pattern_match.group(1)
                if not code:
                    confirm_code = ''.join(random.choices('0123456789', k=4))
                    state.pending_confirmation[event.chat_id] = confirm_code
                    await event.edit(f"‚ú¶ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —É–¥–∞–ª–µ–Ω–∏–µ:\n‚û§ –í–≤–µ–¥–∏—Ç–µ: .delme {confirm_code}\n\n**HURObot // @hurodev**")
                    return
                try:
                    if state.pending_confirmation.get(event.chat_id) == code:
                        await client(DeleteHistoryRequest(peer=event.chat_id, max_id=0, just_clear=True))
                        await event.edit("‚ú¶ –ü–µ—Ä–µ–ø–∏—Å–∫–∞ —É–¥–∞–ª–µ–Ω–∞\n\n**HURObot // @hurodev**")
                    else:
                        await event.edit("‚ú¶ –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è\n\n**HURObot // @hurodev**")
                except Exception as e:
                    await event.edit(f"‚ú¶ –û—à–∏–±–∫–∞\n‚û§ {str(e)}\n\n**HURObot // @hurodev**")

            @client.on(events.NewMessage(outgoing=True, pattern=r'^\.ani(?:\s+(on|off))?$'))
            async def ani_handler(event):
                state.last_user_activity = time.time()
                action = event.pattern_match.group(1)
                if not action:
                    status = "–≤–∫–ª—é—á–µ–Ω–∞" if state.typing_animation else "–≤—ã–∫–ª—é—á–µ–Ω–∞"
                    await event.edit(f"‚ú¶ –ê–Ω–∏–º–∞—Ü–∏—è –Ω–∞–±–æ—Ä–∞: {status}\n‚û§ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: .ani on/off\n\n**HURObot // @hurodev**")
                    return
                try:
                    new_state = action.lower() == 'on'
                    if new_state == state.typing_animation:
                        status = "—É–∂–µ " + ("–≤–∫–ª—é—á–µ–Ω–∞" if state.typing_animation else "–≤—ã–∫–ª—é—á–µ–Ω–∞")
                        await event.edit(f"‚ú¶ –ê–Ω–∏–º–∞—Ü–∏—è {status}\n\n**HURObot // @hurodev**")
                        return
                    state.typing_animation = new_state
                    status = "–≤–∫–ª—é—á–µ–Ω–∞" if state.typing_animation else "–≤—ã–∫–ª—é—á–µ–Ω–∞"
                    await event.edit(f"‚ú¶ –ê–Ω–∏–º–∞—Ü–∏—è {status}\n\n**HURObot // @hurodev**")
                    if not state.typing_animation:
                        await state.stop_animation()
                except Exception as e:
                    await event.edit(f"‚ú¶ –û—à–∏–±–∫–∞\n‚û§ {str(e)}\n\n**HURObot // @hurodev**")

            @client.on(events.NewMessage(outgoing=True))
            async def animate_message(event):
                state.last_user_activity = time.time()
                if not state.typing_animation or not event.text or event.text.startswith('.'):
                    return
                try:
                    await state.stop_animation()
                    current_text = ""
                    for char in event.text:
                        if not state.typing_animation:
                            break
                        current_text += char
                        try:
                            await event.edit(current_text)
                            await asyncio.sleep(0.05)
                        except MessageNotModifiedError:
                            continue
                        except FloodWaitError as e:
                            await asyncio.sleep(e.seconds + 1)
                            break
                        except Exception:
                            break
                except Exception:
                    pass

            @client.on(events.NewMessage(outgoing=True, pattern=r'^\.sti(?:\s+(\d+))?$'))
            async def sti_handler(event):
                state.last_user_activity = time.time()
                count = event.pattern_match.group(1)
                if not count or not event.is_reply:
                    await event.edit("‚ú¶ –û—à–∏–±–∫–∞\n‚û§ –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å—Ç–∏–∫–µ—Ä —Å —á–∏—Å–ª–æ–º\n\n**HURObot // @hurodev**")
                    return
                try:
                    count = min(int(count), 50)
                    reply = await event.get_reply_message()
                    if not hasattr(reply, 'sticker'):
                        await event.edit("‚ú¶ –û—à–∏–±–∫–∞\n‚û§ –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å—Ç–∏–∫–µ—Ä\n\n**HURObot // @hurodev**")
                        return
                    for _ in range(count):
                        await reply.reply(file=reply.sticker)
                    await event.delete()
                except Exception as e:
                    await event.edit(f"‚ú¶ –û—à–∏–±–∫–∞\n‚û§ {str(e)}\n\n**HURObot // @hurodev**")

            @client.on(events.NewMessage(outgoing=True, pattern=r'^\.tagall$'))
            async def tagall_handler(event):
                state.last_user_activity = time.time()
                try:
                    participants = await client.get_participants(event.chat_id)
                    mentions = " ".join([f'@{p.username}' for p in participants if p.username])
                    if not mentions:
                        await event.edit("‚ú¶ –û—à–∏–±–∫–∞\n‚û§ –ù–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å username\n\n**HURObot // @hurodev**")
                        return
                    await event.edit(f"‚ú¶ –£–ø–æ–º—è–Ω—É—Ç—ã:\n‚û§ {mentions}\n\n**HURObot // @hurodev**")
                except Exception as e:
                    await event.edit(f"‚ú¶ –û—à–∏–±–∫–∞\n‚û§ {str(e)}\n\n**HURObot // @hurodev**")

            @client.on(events.NewMessage(outgoing=True, pattern=r'^\.iter(?:\s+(-n))?$'))
            async def iter_handler(event):
                state.last_user_activity = time.time()
                only_phone = event.pattern_match.group(1) == '-n'
                try:
                    participants = await client.get_participants(event.chat_id)
                    if not participants:
                        await event.edit("‚ú¶ –û—à–∏–±–∫–∞\n‚û§ –ù–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤\n\n**HURObot // @hurodev**")
                        return
                    with open("members.txt", "w", encoding="utf-8") as f:
                        for p in participants:
                            if not only_phone or p.phone:
                                f.write(f"{p.id} | @{p.username} | {p.phone or '–Ω–µ—Ç'}\n")
                    await client.send_file('me', "members.txt", caption="‚ú¶ –°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤\n\n**HURObot // @hurodev**")
                    os.remove("members.txt")
                    await event.edit("‚ú¶ –°–ø–∏—Å–æ–∫ —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ \"–ò–∑–±—Ä–∞–Ω–Ω–æ–µ\"\n\n**HURObot // @hurodev**")
                except Exception as e:
                    await event.edit(f"‚ú¶ –û—à–∏–±–∫–∞\n‚û§ {str(e)}\n\n**HURObot // @hurodev**")

            @client.on(events.NewMessage(outgoing=True, pattern=r'^\.up(?:\s+(\d+))?$'))
            async def up_handler(event):
                state.last_user_activity = time.time()
                count = event.pattern_match.group(1)
                if not count or not event.is_reply:
                    await event.edit("‚ú¶ –û—à–∏–±–∫–∞\n‚û§ –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —á–∏—Å–ª–æ–º\n\n**HURObot // @hurodev**")
                    return
                try:
                    count = min(int(count), 50)
                    reply = await event.get_reply_message()
                    user = await reply.get_sender()
                    if not user.username:
                        await event.edit("‚ú¶ –û—à–∏–±–∫–∞\n‚û§ –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç username\n\n**HURObot // @hurodev**")
                        return
                    for _ in range(count):
                        msg = await client.send_message(event.chat_id, f"@{user.username}")
                        await msg.delete()
                    await event.edit(f"‚ú¶ –£–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã: {count} —Ä–∞–∑\n\n**HURObot // @hurodev**")
                except Exception as e:
                    await event.edit(f"‚ú¶ –û—à–∏–±–∫–∞\n‚û§ {str(e)}\n\n**HURObot // @hurodev**")

            @client.on(events.NewMessage(outgoing=True, pattern=r'^\.data$'))
            async def data_handler(event):
                state.last_user_activity = time.time()
                if not event.is_reply:
                    await event.edit("‚ú¶ –û—à–∏–±–∫–∞\n‚û§ –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ\n\n**HURObot // @hurodev**")
                    return
                try:
                    reply = await event.get_reply_message()
                    user = await reply.get_sender()
                    full_user = await client(GetFullUserRequest(user))
                    info = f"ID: {user.id}\n–ò–º—è: {user.first_name}"
                    if hasattr(user, 'phone'):
                        info += f"\n–¢–µ–ª–µ—Ñ–æ–Ω: {user.phone or '—Å–∫—Ä—ã—Ç'}"
                    if hasattr(user, 'status'):
                        if hasattr(user.status, 'was_online'):
                            info += f"\n–ë—ã–ª –æ–Ω–ª–∞–π–Ω: {user.status.was_online.strftime('%Y-%m-%d %H:%M:%S')}"
                    if hasattr(full_user, 'about'):
                        info += f"\n–û —Å–µ–±–µ: {full_user.about[:100] + '...' if full_user.about else '–Ω–µ—Ç'}"
                    await event.edit(f"‚ú¶ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:\n‚û§ {info.replace('\n', '\n‚û§ ')}\n\n**HURObot // @hurodev**")
                except Exception as e:
                    await event.edit(f"‚ú¶ –û—à–∏–±–∫–∞\n‚û§ {str(e)}\n\n**HURObot // @hurodev**")

            # –ù–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã
            @client.on(events.NewMessage(outgoing=True, pattern=r'^\.tr(?:\s+([a-z]{2}))?$'))
            async def translate_cmd(event):
                state.last_user_activity = time.time()
                lang = event.pattern_match.group(1) or 'ru'
                if not event.is_reply:
                    await event.edit("‚ú¶ –û—à–∏–±–∫–∞\n‚û§ –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ\n\n**HURObot // @hurodev**")
                    return
                reply = await event.get_reply_message()
                translated = await translate_text(reply.text, dest=lang)
                await event.edit(f"‚ú¶ –ü–µ—Ä–µ–≤–æ–¥ ({lang.upper()}):\n‚û§ {translated}\n\n**HURObot // @hurodev**")

            @client.on(events.NewMessage(outgoing=True, pattern=r'^\.qr(?:\s+(.+))?$'))
            async def qr_cmd(event):
                state.last_user_activity = time.time()
                text = event.pattern_match.group(1)
                if not text:
                    await event.edit("‚ú¶ –û—à–∏–±–∫–∞\n‚û§ –£–∫–∞–∂–∏—Ç–µ —Ç–µ–∫—Å—Ç\n\n**HURObot // @hurodev**")
                    return
                if await generate_qr_code(text):
                    await client.send_file(event.chat_id, "qr_code.png")
                    await event.delete()
                    os.remove("qr_code.png")

            @client.on(events.NewMessage(outgoing=True, pattern=r'^\.ascii(?:\s+(.+))?$'))
            async def ascii_cmd(event):
                state.last_user_activity = time.time()
                text = event.pattern_match.group(1)
                if not text:
                    await event.edit("‚ú¶ –û—à–∏–±–∫–∞\n‚û§ –£–∫–∞–∂–∏—Ç–µ —Ç–µ–∫—Å—Ç\n\n**HURObot // @hurodev**")
                    return
                ascii_art = await text_to_ascii(text)
                await event.edit(f"`{ascii_art}`", parse_mode='markdown')

            @client.on(events.NewMessage(outgoing=True, pattern=r'^\.dl(?:\s+(.+))?$'))
            async def download_cmd(event):
                state.last_user_activity = time.time()
                url = event.pattern_match.group(1)
                if not url:
                    await event.edit("‚ú¶ –û—à–∏–±–∫–∞\n‚û§ –£–∫–∞–∂–∏—Ç–µ URL\n\n**HURObot // @hurodev**")
                    return
                filename = await download_media(url)
                if filename:
                    await client.send_file(event.chat_id, filename)
                    await event.delete()
                    os.remove(filename)

            @client.on(events.NewMessage(outgoing=True, pattern=r'^\.ip(?:\s+(.+))?$'))
            async def ip_cmd(event):
                state.last_user_activity = time.time()
                ip = event.pattern_match.group(1)
                if not ip:
                    await event.edit("‚ú¶ –û—à–∏–±–∫–∞\n‚û§ –£–∫–∞–∂–∏—Ç–µ IP\n\n**HURObot // @hurodev**")
                    return
                info = await get_ip_info(ip)
                await event.edit(f"‚ú¶ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± IP:\n‚û§ {info.replace('\n', '\n‚û§ ')}\n\n**HURObot // @hurodev**")

            @client.on(events.NewMessage(outgoing=True, pattern=r'^\.site(?:\s+(.+))?$'))
            async def site_cmd(event):
                state.last_user_activity = time.time()
                domain = event.pattern_match.group(1)
                if not domain:
                    await event.edit("‚ú¶ –û—à–∏–±–∫–∞\n‚û§ –£–∫–∞–∂–∏—Ç–µ –¥–æ–º–µ–Ω\n\n**HURObot // @hurodev**")
                    return
                info = await get_whois_info(domain)
                await event.edit(f"‚ú¶ WHOIS –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:\n‚û§ {info[:2000]}\n\n**HURObot // @hurodev**")

            @client.on(events.NewMessage(outgoing=True, pattern=r'^\.dean(?:\s+(.+))?$'))
            async def dean_cmd(event):
                state.last_user_activity = time.time()
                target = event.pattern_match.group(1)
                if not target:
                    await event.edit("‚ú¶ –û—à–∏–±–∫–∞\n‚û§ –£–∫–∞–∂–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ\n\n**HURObot // @hurodev**")
                    return
                info = await deanonymize(target)
                await event.edit(f"‚ú¶ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:\n‚û§ {info.replace('\n', '\n‚û§ ')}\n\n**HURObot // @hurodev**")

            @client.on(events.NewMessage(outgoing=True, pattern=r'^\.calc(?:\s+(.+))?$'))
            async def calc_cmd(event):
                state.last_user_activity = time.time()
                expr = event.pattern_match.group(1)
                if not expr:
                    await event.edit("‚ú¶ –û—à–∏–±–∫–∞\n‚û§ –£–∫–∞–∂–∏—Ç–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ\n\n**HURObot // @hurodev**")
                    return
                result = await calculate_expression(expr)
                if result is None:
                    await event.edit("‚ú¶ –û—à–∏–±–∫–∞\n‚û§ –ù–µ–≤–µ—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ\n\n**HURObot // @hurodev**")
                else:
                    await event.edit(f"‚ú¶ –†–µ–∑—É–ª—å—Ç–∞—Ç:\n‚û§ {result}\n\n**HURObot // @hurodev**")

            @client.on(events.NewMessage(outgoing=True, pattern=r'^\.help(?:\s+([a-zA-Z]+))?$'))
            async def help_handler(event):
                state.last_user_activity = time.time()
                command = event.pattern_match.group(1)
                if not command:
                    help_text = """
‚ú¶ –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:

–û—Å–Ω–æ–≤–Ω—ã–µ:
‚û§ .help - –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º
‚û§ .onl [on/off] - –í–µ—á–Ω—ã–π –æ–Ω–ª–∞–π–Ω
‚û§ .sonl [on/off] - –ú–∏–≥–∞—é—â–∏–π –æ–Ω–ª–∞–π–Ω
‚û§ .save - –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–∞–º–æ—É–¥–∞–ª—è—é—â–µ–µ—Å—è —Ñ–æ—Ç–æ
‚û§ .clone [url] - –ö–ª–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å—Ç
‚û§ .short [url] - –°–æ–∫—Ä–∞—Ç–∏—Ç—å —Å—Å—ã–ª–∫—É
‚û§ .delme [–∫–æ–¥] - –£–¥–∞–ª–∏—Ç—å –ø–µ—Ä–µ–ø–∏—Å–∫—É
‚û§ .ani [on/off] - –ê–Ω–∏–º–∞—Ü–∏—è –Ω–∞–±–æ—Ä–∞
‚û§ .sti [n] - –°–ø–∞–º —Å—Ç–∏–∫–µ—Ä–∞–º–∏
‚û§ .tagall - –£–ø–æ–º—è–Ω—É—Ç—å –≤—Å–µ—Ö
‚û§ .iter [-n] - –≠–∫—Å–ø–æ—Ä—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
‚û§ .up [n] - –ü–µ—Ä–µ—É–ø–æ–º–∏–Ω–∞–Ω–∏—è
‚û§ .data - –ò–Ω—Ñ–æ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ

–ù–æ–≤—ã–µ:
‚û§ .tr [—è–∑—ã–∫] - –ü–µ—Ä–µ–≤–æ–¥—á–∏–∫
‚û§ .qr [—Ç–µ–∫—Å—Ç] - QR-–∫–æ–¥
‚û§ .ascii [—Ç–µ–∫—Å—Ç] - ASCII-–∞—Ä—Ç
‚û§ .dl [url] - –°–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ
‚û§ .ip [–∞–¥—Ä–µ—Å] - –ò–Ω—Ñ–æ –æ–± IP
‚û§ .site [–¥–æ–º–µ–Ω] - WHOIS
‚û§ .dean [–¥–∞–Ω–Ω—ã–µ] - –î–µ–∞–Ω–æ–Ω
‚û§ .calc [–≤—ã—Ä–∞–∂–µ–Ω–∏–µ] - –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä

**HURObot // @hurodev**
                    """
                    await event.edit(help_text)
                else:
                    await event.edit(f"‚ú¶ –ü–æ–º–æ—â—å –ø–æ –∫–æ–º–∞–Ω–¥–µ {command}\n‚û§ –í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏\n\n**HURObot // @hurodev**")

            # –ó–∞–ø—É—Å–∫ –∫–ª–∏–µ–Ω—Ç–∞
            clear_screen()
            show_banner()
            print(f"{COLORS['success']}–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!{COLORS['reset']}")
            print(f"{COLORS['prompt']}–ê–∫–∫–∞—É–Ω—Ç: {name} (+{phone}){COLORS['reset']}")
            print(f"{COLORS['header']}  .help -- —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥{COLORS['reset']}")
            print(f"{COLORS['header']}  .help [–∫–æ–º–∞–Ω–¥–∞] -- —Å–ø—Ä–∞–≤–∫–∞{COLORS['reset']}")
            print(f"{COLORS['accent2']}‚ïê{COLORS['reset']}" * 50)
            await client.run_until_disconnected()

    except Exception as e:
        print(f"{COLORS['error']}–û—à–∏–±–∫–∞: {str(e)}{COLORS['reset']}")
    finally:
        running = False
        input_task.cancel()

# ======================
# –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ
# ======================
async def main_menu():
    """–û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è."""
    clear_screen()
    show_banner()
    if await force_update():
        return

    while True:
        clear_screen()
        show_banner()
        await load_valid_accounts()
        accounts = sorted(ACCOUNT_DATA.keys())
        print(f"{COLORS['header']}–î–æ—Å—Ç—É–ø–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã:{COLORS['reset']}")
        
        if accounts:
            for num in accounts:
                print(f"{COLORS['input']}{num}.{COLORS['reset']} {COLORS['info']}{ACCOUNT_DATA[num]['name']} (+{ACCOUNT_DATA[num]['phone']}){COLORS['reset']}")
        else:
            print(f"{COLORS['error']}–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤{COLORS['reset']}")
        
        print(f"\n{COLORS['header']}0. –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç")
        print(f"-. –£–¥–∞–ª–∏—Ç—å –≤—Å–µ –∞–∫–∫–∞—É–Ω—Ç—ã")
        print(f"{COLORS['accent2']}‚ïê{COLORS['reset']}" * 50)
        
        choice = input(f"{COLORS['prompt']}–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: {COLORS['reset']}")
        
        if choice == "0":
            await create_account()
        elif choice == "-":
            await delete_all_accounts()
        elif choice.isdigit() and int(choice) in accounts:
            await run_account(int(choice))
        else:
            print(f"{COLORS['error']}–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä!{COLORS['reset']}")
            await asyncio.sleep(1)

if __name__ == "__main__":
    try:
        asyncio.run(main_menu())
    except KeyboardInterrupt:
        print(f"\n{COLORS['header']}–†–∞–±–æ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞{COLORS['reset']}")
        sys.exit(0)
    except Exception as e:
        print(f"{COLORS['error']}–§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}{COLORS['reset']}")
        sys.exit(1)
